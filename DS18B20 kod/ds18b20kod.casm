;/////////////////////////////////////////////////////////////////////////////////
;// Code Generator: BoostC Compiler - http://www.sourceboost.com
;// Version       : 7.03
;// License Type  : Pro License
;// Limitations   : PIC12,PIC16 max code size:Unlimited, max RAM banks:Unlimited
;/////////////////////////////////////////////////////////////////////////////////

/*********************************************************************
 *                  Flowcode CAL Delays File
 *
 * File: PIC_CAL_Delay.c
 *
 * (c) 2011 Matrix Multimedia Ltd.
 * http://www.matrixmultimedia.com
 *
 * Software License Agreement
 *
 * The software supplied herewith by Matrix Multimedia Ltd (the
 * “Company”) for its Flowcode graphical programming language is
 * intended and supplied to you, the Company’s customer, for use
 * solely and exclusively on the Company's products. The software
 * is owned by the Company, and is protected under applicable
 * copyright laws. All rights are reserved. Any use in violation
 * of the foregoing restrictions may subject the user to criminal
 * sanctions under applicable laws, as well as to civil liability
 * for the breach of the terms and conditions of this licence.
 *
 * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,
 * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED
 * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,
 * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR
 * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
 * Changelog:
 *
 *  date  | by | description
 * -------+----+-----------------------------------------------------
 * 010911 | BR | Created
 *
 *
 *
 */

//Original Byte Delays
void Wdt_Delay_S(char delay);
void Wdt_Delay_Ms(char delay);

//New Int Delays
void FCI_DELAYINT_US(MX_UINT16 Delay);

void FCI_DELAYINT_MS(MX_UINT16 Delay);
void FCI_DELAYINTWDT_MS(MX_UINT16 Delay);

void FCI_DELAYINT_S(MX_UINT16 Delay);
void FCI_DELAYINTWDT_S(MX_UINT16 Delay);


#ifdef HI_TECH_C

	#define nop()	asm("NOP")

	void delay_10us(char del);
	void delay_us(char del);
	void delay_ms(char del);
	void delay_s(char del);

	void delay_10us(char del)
	{
		char count;
		for(count=0; count<10; count++)
		{
			delay_us(del);
		}
	}

	void delay_us(char del)
	{
		while (del > 1)
		{
			__delay_us(1);
			del = del - 1;
		}
	}

	void delay_ms(char del)
	{
		while (del > 1)
		{
			__delay_ms(1);
			del = del - 1;
		}
	}

	void delay_s(char del)
	{
		char i;
		for(i=0; i<del; i++)
		{
			delay_ms(250);
			delay_ms(250);
			delay_ms(250);
			delay_ms(250);
		}
	}

#endif

void Wdt_Delay_S(char delay)
{
    char i;
    short j;
    for (i=0; i<delay; i++)
    {
        for (j=0; j<999; j++)
        {
            Wdt_Delay_Ms(1);
        }
    }
}

void Wdt_Delay_Ms(char delay)

{
    char i;
    for (i=0; i<delay; i++)
004F  01B7  	CLRF Wdt_Delay__0003E_1_i
0050        label7
0050  0836  	MOVF Wdt_Delay__0003E_arg_delay, W
0051  0237  	SUBWF Wdt_Delay__0003E_1_i, W
0052  1803  	BTFSC STATUS,C
0058  0AB7  	INCF Wdt_Delay__0003E_1_i, F
0059  2850  	GOTO	label7

    {
        MX_CLEAR_WATCHDOG;        //Clear Watchdog Timer
0054  0064  	CLRWDT

        delay_ms(1);
0055  3001  	MOVLW 0x01
0056  00B8  	MOVWF delay_ms_00000_arg_del
0057  201A  	CALL delay_ms_00000

    }
}
0053  0008  	RETURN



void FCI_DELAYINT_US(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	delay_us(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		delay_us(Delay & 0xFF);
}

void FCI_DELAYINT_MS(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	delay_ms(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		delay_ms(Delay & 0xFF);
}

void FCI_DELAYINTWDT_MS(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	Wdt_Delay_Ms(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		Wdt_Delay_Ms(Delay & 0xFF);
}

void FCI_DELAYINT_S(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	delay_s(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		delay_s(Delay & 0xFF);
}

void FCI_DELAYINTWDT_S(MX_UINT16 Delay)
{
  	while (Delay > 255)
  	{
	  	Wdt_Delay_S(255);
	  	Delay = Delay - 255;
  	}
  	if (Delay > 0)
  		Wdt_Delay_S(Delay & 0xFF);
}



//************************************************************************************
//**  
//**  File name:     C:\Users\pc\OneDrive\Downloads\Dzenit Vildic-Projeler (1)\Dzenit Vildic-Projeler\DS18B20 sicaklik sensoru\DS18B20 kod\ds18b20kod.c
//**  Title:         
//**  Description:   
//**  
//**  Generated by:  Flowcode v5.1.0.0
//**  Date:          Thursday, September 26, 2024 15:33:22
//**  Licence:       Professional
//**  Registered to: xyz
//**  Licence key:   WUK7B9
//**  
//**  
//**  http://www.matrixmultimedia.com
//**  
//************************************************************************************


#define MX_PIC

#define MX_USES_UINT8 1
#define MX_USES_SINT16 1
#define MX_USES_CHAR 0
#define MX_USES_FLOAT 0
#define MX_USES_SINT32 0
#define MX_USES_BOOL 1
#define MX_USES_UINT16 0
#define MX_USES_UINT32 0
//Defines for microcontroller
#define P16F877
#define FC_CAL_PIC
#define MX_ADC
#define MX_ADC_TYPE_30
#define MX_ADC_BITS_10
#define MX_EE
#define MX_EE_TYPE2
#define MX_EE_SIZE 256
#define MX_SPI_1
#define MX_SPI_1_MISO_PORT portc
#define MX_SPI_1_MISO_TRIS trisc
#define MX_SPI_1_MISO_PIN 4
#define MX_SPI_1_MOSI_PORT portc
#define MX_SPI_1_MOSI_TRIS trisc
#define MX_SPI_1_MOSI_PIN 5
#define MX_SPI_1_CLK_PORT portc
#define MX_SPI_1_CLK_TRIS trisc
#define MX_SPI_1_CLK_PIN 3
#define MX_SPI_1_SS_PORT portc
#define MX_SPI_1_SS_TRIS trisc
#define MX_UART_1
#define MX_UART_1_TX_PORT portc
#define MX_UART_1_TX_TRIS trisc
#define MX_UART_1_TX_PIN 6
#define MX_UART_1_RX_PORT portc
#define MX_UART_1_RX_TRIS trisc
#define MX_UART_1_RX_PIN 7
#define MX_I2C
#define MX_MI2C
#define MX_I2C_1
#define MX_I2C_1_SDA_PORT portc
#define MX_I2C_1_SDA_TRIS trisc
#define MX_I2C_1_SDA_PIN 4
#define MX_I2C_1_SCL_PORT portc
#define MX_I2C_1_SCL_TRIS trisc
#define MX_I2C_1_SCL_PIN 3
#define MX_PWM
#define MX_PWM_CNT 2
#define MX_PWM_PSCA1
#define MX_PWM_PSCA4
#define MX_PWM_PSCA16
#define MX_PWM_1_PORT portc
#define MX_PWM_1_TRIS trisc
#define MX_PWM_1_PIN 2
#define MX_PWM_2_PORT portc
#define MX_PWM_2_TRIS trisc
#define MX_PWM_2_PIN 1

//Functions
#define MX_CLK_SPEED 10000000
#ifdef _BOOSTC
#include <system.h>
#endif
#ifdef HI_TECH_C
#include <pic.h>
#endif

//Configuration data
#ifdef _BOOSTC
#pragma DATA 0x2007, 0x3f7a
#endif
#ifdef HI_TECH_C
__CONFIG(0x3f7a);
#endif

//Internal functions
#include "C:\Program Files (x86)\Flowcode\v5\FCD\internals.c"

//Macro function declarations
void FCM_Pozdravna_poruka();


//Variable declarations
#define FCV_FALSE (0)
#define FCV_TRUE (1)
MX_UINT8 FCV_PWPLUS;
MX_UINT8 FCV_TEMPDEC;
MX_UINT8 FCV_SETPOINT;
MX_SINT16 FCV_TEMP;
MX_UINT8 FCV_TEMPINT;
MX_UINT8 FCV_PWMINUS;




//LCDDisplay(0): //Defines:

/**** Macro Substitutions ****
a = Unique Component Reference Number
b = D1 Port Letter
c = D2 Port Letter
d = D3 Port Letter
e = D4 Port Letter
f = RS Port Letter
g = E Port Letter
h = Data 1_Pin
i = Data 2 Pin
j = Data 3 Pin
k = Data 4 Pin
l = RS Pin
m = Enable Pin
n = Row Count
o = Column Count
******************************/

	//component connections
	#define LCD_1__PORT0    portb
	#define LCD_1__PORT1    portb
	#define LCD_1__PORT2    portb
	#define LCD_1__PORT3    portb
	#define LCD_1__PORT4    portb
	#define LCD_1__PORT5    portb
	#define LCD_1__TRIS0    trisb
	#define LCD_1__TRIS1    trisb
	#define LCD_1__TRIS2    trisb
	#define LCD_1__TRIS3    trisb
	#define LCD_1__TRIS4    trisb
	#define LCD_1__TRIS5    trisb
	#define LCD_1__BIT0    	4
	#define LCD_1__BIT1    	5
	#define LCD_1__BIT2    	6
	#define LCD_1__BIT3    	7
	#define LCD_1__RS      	2
	#define LCD_1__E       	3
	#define LCD_1__ROWCNT	2
	#define LCD_1__COLCNT	16

	#ifdef _BOOSTC
	  #define LCD_1__DELAY   delay_10us(10)
	#endif
	#ifdef _C2C_
	  #define LCD_1__DELAY   delay_us(100)
	#endif
	#ifdef HI_TECH_C
	  #define LCD_1__DELAY   __delay_us(120)
	#endif
	#ifndef LCD_1__DELAY
	  #define LCD_1__DELAY   delay_us(100)
	#endif




//LCDDisplay(0): //Macro function declarations

void FCD_LCDDisplay0_RawSend(MX_UINT8 in, MX_UINT8 mask);
void FCD_LCDDisplay0_Start();
void FCD_LCDDisplay0_Clear();
void FCD_LCDDisplay0_PrintASCII(MX_UINT8 Character);
void FCD_LCDDisplay0_Command(MX_UINT8 in);
void FCD_LCDDisplay0_Cursor(MX_UINT8 x, MX_UINT8 y);
void FCD_LCDDisplay0_PrintNumber(MX_SINT16 Number);
void FCD_LCDDisplay0_PrintString(MX_STRING String, MX_UINT8 MSZ_String);
void FCD_LCDDisplay0_ScrollDisplay(MX_UINT8 Direction, MX_UINT8 Num_Positions);
void FCD_LCDDisplay0_ClearLine(MX_UINT8 Line);
void FCD_LCDDisplay0_RAM_Write(MX_UINT8 nIdx, MX_UINT8 d0, MX_UINT8 d1, MX_UINT8 d2, MX_UINT8 d3, MX_UINT8 d4, MX_UINT8 d5, MX_UINT8 d6, MX_UINT8 d7);


//One_Wire(0): //Defines:

/**** Macro Substitutions ****
a = Unique Reference
b = CRC Check Enable (0-Off / 1-On)
c = One Wire Port Register
d = One Wire Pin
******************************/

//Global Definitions

#define 	ONEWIRE_2_OO_CRC_EN  			0
#define 	ONEWIRE_2_OO_PORT  			porta
#define 	ONEWIRE_2_OO_TRIS 				trisa
#define 	ONEWIRE_2_OO_PIN  				1

//I/O for the OO
#define 	ONEWIRE_2_Float_OO 			FC_CAL_Bit_In_DDR( ONEWIRE_2_OO_PORT , ONEWIRE_2_OO_TRIS , ONEWIRE_2_OO_PIN )
#define 	ONEWIRE_2_Clear_OO				FC_CAL_Bit_Low_DDR( ONEWIRE_2_OO_PORT , ONEWIRE_2_OO_TRIS , ONEWIRE_2_OO_PIN )

#ifndef OO_DEFS
 #define OO_DEFS

 // 1. ROM function commands
 #define		OO_READROM        	0x33
 #define   		OO_MATCHROM       	0x55
 #define  		OO_SKIPROM        	0xCC
 #define		OO_SEARCHROM      	0xF0
 #define		OO_ALARMSEARCH    	0xEC

 // 2. Memory Command Functions
 #define		OO_WRITEPAD       	0x4E
 #define		OO_READPAD        	0xBE
 #define		OO_COPYPAD        	0x48
 #define		OO_CONVERTT       	0x44
 #define		OO_RECALLE2			0xB8
 #define		OO_READSUPPLY		0xB4

#endif

//CRC lookup table for the OO - Only include once for all 1-wire components
#if OO_CRC_EN == 1
  #ifndef OO_CRC_ROM
	#define OO_CRC_ROM

	ROMARRAY_S OO_CRC_ROM ROMARRAY_E = {0, 94, 188, 226, 97, 63, 221, 131, 194, 156, 126, 32, 163, 253, 31, 65,
									157, 195, 33, 127, 252, 162, 64, 30, 95, 1, 227, 189, 62, 96, 130, 220,
									35, 125, 159, 193, 66, 28, 254, 160, 225, 191, 93, 3, 128, 222, 60, 98,
									190, 224, 2, 92, 223, 129, 99, 61, 124, 34, 192, 158, 29, 67, 161, 255,
									70, 24, 250, 164, 39, 121, 155, 197, 132, 218, 56, 102, 229, 187, 89, 7,
									219, 133, 103, 57, 186, 228, 6, 88, 25, 71, 165, 251, 120, 38, 196, 154,
									101, 59, 217, 135, 4, 90, 184, 230, 167, 249, 27, 69, 198, 152, 122, 36,
									248, 166, 68, 26, 153, 199, 37, 123, 58, 100, 134, 216, 91, 5, 231, 185,
									140, 210, 48, 110, 237, 179, 81, 15, 78, 16, 242, 172, 47, 113, 147, 205,
									17, 79, 173, 243, 112, 46, 204, 146, 211, 141, 111, 49, 178, 236, 14, 80,
									175, 241, 19, 77, 206, 144, 114, 44, 109, 51, 209, 143, 12, 82, 176, 238,
									50, 108, 142, 208, 83, 13, 239, 177, 240, 174, 76, 18, 145, 207, 45, 115,
									202, 148, 118, 40, 171, 245, 23, 73, 8, 86, 180, 234, 105, 55, 213, 139,
									87, 9, 235, 181, 54, 104, 138, 212, 149, 203, 41, 119, 244, 170, 72, 22,
									233, 183, 85, 11, 136, 214, 52, 106, 43, 117, 151, 201, 74, 20, 246, 168,
									116, 42, 200, 150, 21, 75, 169, 247, 182, 232, 10, 84, 215, 137, 107, 53};
  #endif

	// CRC working variable
	MX_UINT8 		ONEWIRE_2_oo_crc = 0;

#endif

//Global Variables

// Internal variables
MX_UINT8        ONEWIRE_2_oo_id[8];
MX_SINT8 		ONEWIRE_2_oo_conflict;
MX_UINT8        ONEWIRE_2_oo_new_conflict;

// Device ID Variables
MX_UINT8 		ONEWIRE_2_oo_num_devices = 0;
0586  01B3  	CLRF gbl_ONEWIRE_2_oo_num_devices

MX_UINT8 		ONEWIRE_2_oo_DevID[64] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0587  1283  	BCF STATUS, RP0
0588  1383  	BCF	STATUS,IRP
0589  3020  	MOVLW LOW(gbl_ONEWIRE_2_oo_DevID+D'0')
058A  0084  	MOVWF FSR
058B  303F  	MOVLW 0x3F
058C  00DF  	MOVWF gbl_ONEWIRE_2_oo_DevID+D'63'
058D        label72
058D  0180  	CLRF INDF
058E  0A84  	INCF FSR, F
058F  118A  	BCF PCLATH,3
0590  120A  	BCF PCLATH,4
0591  0BDF  	DECFSZ gbl_ONEWIRE_2_oo_DevID+D'63', F
0592  2D8D  	GOTO	label72

								0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// Scratchpad Variables
MX_UINT8 		ONEWIRE_2_oo_scratchpad[9];

// Scratchpad contents DS1820
// 0	Temperature LSB
// 1	Temperature MSB
// 2	Hi alarm temperature
// 3	Lo alarm temperature
// 4	Reserved, 0xFF
// 5	Reserved, 0xFF
// 6	Remainder register
// 7	Nr of counts per degree
// 8	CRC of pad contents




//One_Wire(0): //Macro function declarations

void FCD_One_Wire0_oo_crc_shuffle_byte(MX_UINT8 input);
void FCD_One_Wire0_oo_crc_init();
MX_UINT8 FCD_One_Wire0_rx_bit();
void FCD_One_Wire0_tx_bit(MX_UINT8 out);
MX_UINT8 FCD_One_Wire0_oo_get_next_id();
MX_UINT8 FCD_One_Wire0_oo_busreset();
MX_UINT8 FCD_One_Wire0_oo_get_pad_byte(MX_UINT8 index);
void FCD_One_Wire0_oo_tx_byte(MX_UINT8 data);
MX_UINT8 FCD_One_Wire0_oo_rx_byte();
MX_UINT8 FCD_One_Wire0_oo_scanbus();
MX_UINT8 FCD_One_Wire0_oo_get_devicecount();
MX_UINT8 FCD_One_Wire0_oo_read_device(MX_UINT8 count);
MX_UINT8 FCD_One_Wire0_oo_get_IDByte(MX_UINT8 device, MX_UINT8 octet);
MX_UINT8 FCD_One_Wire0_DS1820_start_conversion();
MX_UINT8 FCD_One_Wire0_DS1820_read_scratchpad();
MX_UINT16 FCD_One_Wire0_DS1820_get_temp();


//EEPROM(0): //Defines:

/**** Macro Substitutions ****
Component has no substitutions
******************************/

#ifndef MX_EEPROM_REF
	#define MX_EEPROM_REF

	extern MX_UINT8 FC_CAL_EE_Read (MX_UINT16 Address);
	extern void FC_CAL_EE_Write (MX_UINT16 Address, MX_UINT8 Data);

#endif




//EEPROM(0): //Macro function declarations

MX_UINT16 FCD_EEPROM0_EEPROMRead(MX_UINT16 addr);
void FCD_EEPROM0_WriteEEPROM(MX_UINT16 addr, MX_UINT16 data);



//LCDDisplay(0): //Macro implementations


void FCD_LCDDisplay0_RawSend(MX_UINT8 in, MX_UINT8 mask)

{
	
		MX_UINT8 pt;

		FC_CAL_Bit_Low(LCD_1__PORT0, LCD_1__BIT0);
0083  1283  	BCF STATUS, RP0
0084  1206  	BCF gbl_portb,4

		FC_CAL_Bit_Low(LCD_1__PORT1, LCD_1__BIT1);
0085  1286  	BCF gbl_portb,5

		FC_CAL_Bit_Low(LCD_1__PORT2, LCD_1__BIT2);
0086  1306  	BCF gbl_portb,6

		FC_CAL_Bit_Low(LCD_1__PORT3, LCD_1__BIT3);
0087  1386  	BCF gbl_portb,7

		FC_CAL_Bit_Low(LCD_1__PORT4, LCD_1__RS);
0088  1106  	BCF gbl_portb,2

		FC_CAL_Bit_Low(LCD_1__PORT5, LCD_1__E);
0089  1186  	BCF gbl_portb,3

		pt = ((in >> 4) & 0x0f);
008A  1683  	BSF STATUS, RP0
008B  0E44  	SWAPF FCD_LCDDis_00055_arg_in, W
008C  390F  	ANDLW 0x0F
008D  00C6  	MOVWF FCD_LCDDis_00055_1_pt
008E  300F  	MOVLW 0x0F
008F  05C6  	ANDWF FCD_LCDDis_00055_1_pt, F

		if (pt & 0x01)
0090  1C46  	BTFSS FCD_LCDDis_00055_1_pt,0
0091  2894  	GOTO	label8

		    FC_CAL_Bit_High(LCD_1__PORT0, LCD_1__BIT0);
0092  1283  	BCF STATUS, RP0
0093  1606  	BSF gbl_portb,4

		if (pt & 0x02)
0094  1683  	BSF STATUS, RP0
0095  1CC6  	BTFSS FCD_LCDDis_00055_1_pt,1
0096  2899  	GOTO	label9

		    FC_CAL_Bit_High(LCD_1__PORT1, LCD_1__BIT1);
0097  1283  	BCF STATUS, RP0
0098  1686  	BSF gbl_portb,5

		if (pt & 0x04)
0099  1683  	BSF STATUS, RP0
009A  1D46  	BTFSS FCD_LCDDis_00055_1_pt,2
009B  289E  	GOTO	label10

		    FC_CAL_Bit_High(LCD_1__PORT2, LCD_1__BIT2);
009C  1283  	BCF STATUS, RP0
009D  1706  	BSF gbl_portb,6

		if (pt & 0x08)
009E  1683  	BSF STATUS, RP0
009F  1DC6  	BTFSS FCD_LCDDis_00055_1_pt,3
00A0  28A3  	GOTO	label11

		    FC_CAL_Bit_High(LCD_1__PORT3, LCD_1__BIT3);
00A1  1283  	BCF STATUS, RP0
00A2  1786  	BSF gbl_portb,7

		if (mask)
00A3  1683  	BSF STATUS, RP0
00A4  08C5  	MOVF FCD_LCDDis_00055_arg_mask, F
00A5  1903  	BTFSC STATUS,Z
00A6  28A9  	GOTO	label12

		    FC_CAL_Bit_High(LCD_1__PORT4, LCD_1__RS);
00A7  1283  	BCF STATUS, RP0
00A8  1506  	BSF gbl_portb,2

		LCD_1__DELAY;
00A9  300A  	MOVLW 0x0A
00AA  1683  	BSF STATUS, RP0
00AB  00C7  	MOVWF delay_10us_00000_arg_del
00AC  2032  	CALL delay_10us_00000

		FC_CAL_Bit_High (LCD_1__PORT5, LCD_1__E);
00AD  1283  	BCF STATUS, RP0
00AE  1586  	BSF gbl_portb,3

		LCD_1__DELAY;
00AF  300A  	MOVLW 0x0A
00B0  1683  	BSF STATUS, RP0
00B1  00C7  	MOVWF delay_10us_00000_arg_del
00B2  2032  	CALL delay_10us_00000

		FC_CAL_Bit_Low (LCD_1__PORT5, LCD_1__E);
00B3  1283  	BCF STATUS, RP0
00B4  1186  	BCF gbl_portb,3

		pt = (in & 0x0f);
00B5  300F  	MOVLW 0x0F
00B6  1683  	BSF STATUS, RP0
00B7  0544  	ANDWF FCD_LCDDis_00055_arg_in, W
00B8  00C6  	MOVWF FCD_LCDDis_00055_1_pt

		LCD_1__DELAY;
00B9  300A  	MOVLW 0x0A
00BA  00C7  	MOVWF delay_10us_00000_arg_del
00BB  2032  	CALL delay_10us_00000

		FC_CAL_Bit_Low(LCD_1__PORT0, LCD_1__BIT0);
00BC  1283  	BCF STATUS, RP0
00BD  1206  	BCF gbl_portb,4

		FC_CAL_Bit_Low(LCD_1__PORT1, LCD_1__BIT1);
00BE  1286  	BCF gbl_portb,5

		FC_CAL_Bit_Low(LCD_1__PORT2, LCD_1__BIT2);
00BF  1306  	BCF gbl_portb,6

		FC_CAL_Bit_Low(LCD_1__PORT3, LCD_1__BIT3);
00C0  1386  	BCF gbl_portb,7

		FC_CAL_Bit_Low(LCD_1__PORT4, LCD_1__RS);
00C1  1106  	BCF gbl_portb,2

		FC_CAL_Bit_Low(LCD_1__PORT5, LCD_1__E);
00C2  1186  	BCF gbl_portb,3

		if (pt & 0x01)
00C3  1683  	BSF STATUS, RP0
00C4  1C46  	BTFSS FCD_LCDDis_00055_1_pt,0
00C5  28C8  	GOTO	label13

		    FC_CAL_Bit_High(LCD_1__PORT0, LCD_1__BIT0);
00C6  1283  	BCF STATUS, RP0
00C7  1606  	BSF gbl_portb,4

		if (pt & 0x02)
00C8  1683  	BSF STATUS, RP0
00C9  1CC6  	BTFSS FCD_LCDDis_00055_1_pt,1
00CA  28CD  	GOTO	label14

		    FC_CAL_Bit_High(LCD_1__PORT1, LCD_1__BIT1);
00CB  1283  	BCF STATUS, RP0
00CC  1686  	BSF gbl_portb,5

		if (pt & 0x04)
00CD  1683  	BSF STATUS, RP0
00CE  1D46  	BTFSS FCD_LCDDis_00055_1_pt,2
00CF  28D2  	GOTO	label15

		    FC_CAL_Bit_High(LCD_1__PORT2, LCD_1__BIT2);
00D0  1283  	BCF STATUS, RP0
00D1  1706  	BSF gbl_portb,6

		if (pt & 0x08)
00D2  1683  	BSF STATUS, RP0
00D3  1DC6  	BTFSS FCD_LCDDis_00055_1_pt,3
00D4  28D7  	GOTO	label16

		    FC_CAL_Bit_High(LCD_1__PORT3, LCD_1__BIT3);
00D5  1283  	BCF STATUS, RP0
00D6  1786  	BSF gbl_portb,7

		if (mask)
00D7  1683  	BSF STATUS, RP0
00D8  08C5  	MOVF FCD_LCDDis_00055_arg_mask, F
00D9  1903  	BTFSC STATUS,Z
00DA  28DD  	GOTO	label17

		    FC_CAL_Bit_High(LCD_1__PORT4, LCD_1__RS);
00DB  1283  	BCF STATUS, RP0
00DC  1506  	BSF gbl_portb,2

		LCD_1__DELAY;
00DD  300A  	MOVLW 0x0A
00DE  1683  	BSF STATUS, RP0
00DF  00C7  	MOVWF delay_10us_00000_arg_del
00E0  2032  	CALL delay_10us_00000

		FC_CAL_Bit_High (LCD_1__PORT5, LCD_1__E);
00E1  1283  	BCF STATUS, RP0
00E2  1586  	BSF gbl_portb,3

		LCD_1__DELAY;
00E3  300A  	MOVLW 0x0A
00E4  1683  	BSF STATUS, RP0
00E5  00C7  	MOVWF delay_10us_00000_arg_del
00E6  2032  	CALL delay_10us_00000

		FC_CAL_Bit_Low (LCD_1__PORT5, LCD_1__E);
00E7  1283  	BCF STATUS, RP0
00E8  1186  	BCF gbl_portb,3

		LCD_1__DELAY;
00E9  300A  	MOVLW 0x0A
00EA  1683  	BSF STATUS, RP0
00EB  00C7  	MOVWF delay_10us_00000_arg_del
00EC  2032  	CALL delay_10us_00000


}
00ED  0008  	RETURN


void FCD_LCDDisplay0_Start()

{
	
		FC_CAL_Bit_Low_DDR(LCD_1__PORT0, LCD_1__TRIS0, LCD_1__BIT0);
03C7  1683  	BSF STATUS, RP0
03C8  1303  	BCF STATUS, RP1
03C9  1206  	BCF gbl_trisb,4
03CA  1283  	BCF STATUS, RP0
03CB  1206  	BCF gbl_portb,4

		FC_CAL_Bit_Low_DDR(LCD_1__PORT1, LCD_1__TRIS1, LCD_1__BIT1);
03CC  1683  	BSF STATUS, RP0
03CD  1286  	BCF gbl_trisb,5
03CE  1283  	BCF STATUS, RP0
03CF  1286  	BCF gbl_portb,5

		FC_CAL_Bit_Low_DDR(LCD_1__PORT2, LCD_1__TRIS2, LCD_1__BIT2);
03D0  1683  	BSF STATUS, RP0
03D1  1306  	BCF gbl_trisb,6
03D2  1283  	BCF STATUS, RP0
03D3  1306  	BCF gbl_portb,6

		FC_CAL_Bit_Low_DDR(LCD_1__PORT3, LCD_1__TRIS3, LCD_1__BIT3);
03D4  1683  	BSF STATUS, RP0
03D5  1386  	BCF gbl_trisb,7
03D6  1283  	BCF STATUS, RP0
03D7  1386  	BCF gbl_portb,7

		FC_CAL_Bit_Low_DDR(LCD_1__PORT4, LCD_1__TRIS4, LCD_1__RS);
03D8  1683  	BSF STATUS, RP0
03D9  1106  	BCF gbl_trisb,2
03DA  1283  	BCF STATUS, RP0
03DB  1106  	BCF gbl_portb,2

		FC_CAL_Bit_Low_DDR(LCD_1__PORT5, LCD_1__TRIS5, LCD_1__E);
03DC  1683  	BSF STATUS, RP0
03DD  1186  	BCF gbl_trisb,3
03DE  1283  	BCF STATUS, RP0
03DF  1186  	BCF gbl_portb,3


		Wdt_Delay_Ms(12);
03E0  300C  	MOVLW 0x0C
03E1  1683  	BSF STATUS, RP0
03E2  00B6  	MOVWF Wdt_Delay__0003E_arg_delay
03E3  204F  	CALL Wdt_Delay__0003E


		FCD_LCDDisplay0_RawSend(0x33, 0);
03E4  3033  	MOVLW 0x33
03E5  00C4  	MOVWF FCD_LCDDis_00055_arg_in
03E6  01C5  	CLRF FCD_LCDDis_00055_arg_mask
03E7  2083  	CALL FCD_LCDDis_00055

		Wdt_Delay_Ms(2);
03E8  3002  	MOVLW 0x02
03E9  00B6  	MOVWF Wdt_Delay__0003E_arg_delay
03EA  204F  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x33, 0);
03EB  3033  	MOVLW 0x33
03EC  00C4  	MOVWF FCD_LCDDis_00055_arg_in
03ED  01C5  	CLRF FCD_LCDDis_00055_arg_mask
03EE  2083  	CALL FCD_LCDDis_00055

		Wdt_Delay_Ms(2);
03EF  3002  	MOVLW 0x02
03F0  00B6  	MOVWF Wdt_Delay__0003E_arg_delay
03F1  204F  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x32, 0);
03F2  3032  	MOVLW 0x32
03F3  00C4  	MOVWF FCD_LCDDis_00055_arg_in
03F4  01C5  	CLRF FCD_LCDDis_00055_arg_mask
03F5  2083  	CALL FCD_LCDDis_00055

		Wdt_Delay_Ms(2);
03F6  3002  	MOVLW 0x02
03F7  00B6  	MOVWF Wdt_Delay__0003E_arg_delay
03F8  204F  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x2c, 0);
03F9  302C  	MOVLW 0x2C
03FA  00C4  	MOVWF FCD_LCDDis_00055_arg_in
03FB  01C5  	CLRF FCD_LCDDis_00055_arg_mask
03FC  2083  	CALL FCD_LCDDis_00055

		Wdt_Delay_Ms(2);
03FD  3002  	MOVLW 0x02
03FE  00B6  	MOVWF Wdt_Delay__0003E_arg_delay
03FF  204F  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x06, 0);
0400  3006  	MOVLW 0x06
0401  00C4  	MOVWF FCD_LCDDis_00055_arg_in
0402  01C5  	CLRF FCD_LCDDis_00055_arg_mask
0403  2083  	CALL FCD_LCDDis_00055

		Wdt_Delay_Ms(2);
0404  3002  	MOVLW 0x02
0405  00B6  	MOVWF Wdt_Delay__0003E_arg_delay
0406  204F  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x0c, 0);
0407  300C  	MOVLW 0x0C
0408  00C4  	MOVWF FCD_LCDDis_00055_arg_in
0409  01C5  	CLRF FCD_LCDDis_00055_arg_mask
040A  2083  	CALL FCD_LCDDis_00055

		Wdt_Delay_Ms(2);
040B  3002  	MOVLW 0x02
040C  00B6  	MOVWF Wdt_Delay__0003E_arg_delay
040D  204F  	CALL Wdt_Delay__0003E


		//clear the display
		FCD_LCDDisplay0_RawSend(0x01, 0);
040E  3001  	MOVLW 0x01
040F  00C4  	MOVWF FCD_LCDDis_00055_arg_in
0410  01C5  	CLRF FCD_LCDDis_00055_arg_mask
0411  2083  	CALL FCD_LCDDis_00055

		Wdt_Delay_Ms(2);
0412  3002  	MOVLW 0x02
0413  00B6  	MOVWF Wdt_Delay__0003E_arg_delay
0414  204F  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x02, 0);
0415  3002  	MOVLW 0x02
0416  00C4  	MOVWF FCD_LCDDis_00055_arg_in
0417  01C5  	CLRF FCD_LCDDis_00055_arg_mask
0418  2083  	CALL FCD_LCDDis_00055

		Wdt_Delay_Ms(2);
0419  3002  	MOVLW 0x02
041A  00B6  	MOVWF Wdt_Delay__0003E_arg_delay
041B  204F  	CALL Wdt_Delay__0003E


}
041C  0008  	RETURN


void FCD_LCDDisplay0_Clear()

{
	
		FCD_LCDDisplay0_RawSend(0x01, 0);
0195  3001  	MOVLW 0x01
0196  1683  	BSF STATUS, RP0
0197  1303  	BCF STATUS, RP1
0198  00C4  	MOVWF FCD_LCDDis_00055_arg_in
0199  01C5  	CLRF FCD_LCDDis_00055_arg_mask
019A  2083  	CALL FCD_LCDDis_00055

		Wdt_Delay_Ms(2);
019B  3002  	MOVLW 0x02
019C  00B6  	MOVWF Wdt_Delay__0003E_arg_delay
019D  204F  	CALL Wdt_Delay__0003E

		FCD_LCDDisplay0_RawSend(0x02, 0);
019E  3002  	MOVLW 0x02
019F  00C4  	MOVWF FCD_LCDDis_00055_arg_in
01A0  01C5  	CLRF FCD_LCDDis_00055_arg_mask
01A1  2083  	CALL FCD_LCDDis_00055

		Wdt_Delay_Ms(2);
01A2  3002  	MOVLW 0x02
01A3  00B6  	MOVWF Wdt_Delay__0003E_arg_delay
01A4  204F  	CALL Wdt_Delay__0003E


}
01A5  0008  	RETURN


void FCD_LCDDisplay0_PrintASCII(MX_UINT8 Character)

{
	
		FCD_LCDDisplay0_RawSend(Character, 0x10);
03C1  0834  	MOVF FCD_LCDDis_00057_arg_Character, W
03C2  00C4  	MOVWF FCD_LCDDis_00055_arg_in
03C3  3010  	MOVLW 0x10
03C4  00C5  	MOVWF FCD_LCDDis_00055_arg_mask
03C5  2083  	CALL FCD_LCDDis_00055


}
03C6  0008  	RETURN


void FCD_LCDDisplay0_Command(MX_UINT8 in)
{
	
		FCD_LCDDisplay0_RawSend(in, 0);
		Wdt_Delay_Ms(2);

}

void FCD_LCDDisplay0_Cursor(MX_UINT8 x, MX_UINT8 y)

{
	
	  #if (LCD_1__ROWCNT == 1)
	    y=0x80;
	  #endif

	  #if (LCD_1__ROWCNT == 2)
		if (y==0)
01C2  08B5  	MOVF FCD_LCDDis_00052_arg_y, F
01C3  1D03  	BTFSS STATUS,Z
01C4  29C8  	GOTO	label30
01C8        label30

			y=0x80;
01C5  3080  	MOVLW 0x80
01C6  00B5  	MOVWF FCD_LCDDis_00052_arg_y

		else
01C7  29CA  	GOTO	label31
01CA        label31

			y=0xc0;
01C8  30C0  	MOVLW 0xC0
01C9  00B5  	MOVWF FCD_LCDDis_00052_arg_y

	  #endif

	  #if (LCD_1__ROWCNT == 4)
		if (y==0)
			y=0x80;
		else if (y==1)
			y=0xc0;

		#if (LCD_1__COLCNT == 16)
			else if (y==2)
				y=0x90;
			else
				y=0xd0;
		#endif

		#if (LCD_1__COLCNT == 20)
			else if (y==2)
				y=0x94;
			else
				y=0xd4;
		#endif
	  #endif

		FCD_LCDDisplay0_RawSend(y+x, 0);
01CA  0834  	MOVF FCD_LCDDis_00052_arg_x, W
01CB  0735  	ADDWF FCD_LCDDis_00052_arg_y, W
01CC  00C4  	MOVWF FCD_LCDDis_00055_arg_in
01CD  01C5  	CLRF FCD_LCDDis_00055_arg_mask
01CE  2083  	CALL FCD_LCDDis_00055

		Wdt_Delay_Ms(2);
01CF  3002  	MOVLW 0x02
01D0  00B6  	MOVWF Wdt_Delay__0003E_arg_delay
01D1  204F  	CALL Wdt_Delay__0003E


}
01D2  0008  	RETURN


void FCD_LCDDisplay0_PrintNumber(MX_SINT16 Number)

{
	
		MX_SINT16 tmp_int;
		MX_UINT8 tmp_byte;

		if (Number < 0)
02D3  1FB5  	BTFSS FCD_LCDDis_00059_arg_Number+D'1',7
02D4  2AE2  	GOTO	label42
02E2        label42

		{
			FCD_LCDDisplay0_RawSend('-', 0x10);
02D5  302D  	MOVLW 0x2D
02D6  00C4  	MOVWF FCD_LCDDis_00055_arg_in
02D7  3010  	MOVLW 0x10
02D8  00C5  	MOVWF FCD_LCDDis_00055_arg_mask
02D9  2083  	CALL FCD_LCDDis_00055

			Number = 0 - Number;
02DA  0834  	MOVF FCD_LCDDis_00059_arg_Number, W
02DB  3C00  	SUBLW 0x00
02DC  00B9  	MOVWF CompTempVar2199
02DD  09B5  	COMF FCD_LCDDis_00059_arg_Number+D'1', F
02DE  1803  	BTFSC STATUS,C
02DF  0AB5  	INCF FCD_LCDDis_00059_arg_Number+D'1', F
02E0  0839  	MOVF CompTempVar2199, W
02E1  00B4  	MOVWF FCD_LCDDis_00059_arg_Number

		}

		tmp_int = Number;
02E2  0834  	MOVF FCD_LCDDis_00059_arg_Number, W
02E3  00B6  	MOVWF FCD_LCDDis_00059_1_tmp_int
02E4  0835  	MOVF FCD_LCDDis_00059_arg_Number+D'1', W
02E5  00B7  	MOVWF FCD_LCDDis_00059_1_tmp_int+D'1'

		if (Number >= 10000)
02E6  3027  	MOVLW 0x27
02E7  0235  	SUBWF FCD_LCDDis_00059_arg_Number+D'1', W
02E8  1D03  	BTFSS STATUS,Z
02E9  2AEC  	GOTO	label43
02EA  3010  	MOVLW 0x10
02EB  0234  	SUBWF FCD_LCDDis_00059_arg_Number, W
02EC        label43
02EC  1C03  	BTFSS STATUS,C
02ED  2B1A  	GOTO	label47
02EE  1BB5  	BTFSC FCD_LCDDis_00059_arg_Number+D'1',7
02EF  2B1A  	GOTO	label47

		{
			tmp_byte = tmp_int / 10000;
02F0  01BD  	CLRF CompTempVar2202
02F1  0836  	MOVF FCD_LCDDis_00059_1_tmp_int, W
02F2  00B9  	MOVWF __div_16_1_00003_arg_a
02F3  0837  	MOVF FCD_LCDDis_00059_1_tmp_int+D'1', W
02F4  00BA  	MOVWF __div_16_1_00003_arg_a+D'1'
02F5  1FB7  	BTFSS FCD_LCDDis_00059_1_tmp_int+D'1',7
02F6  2AFD  	GOTO	label44
02F7  09B9  	COMF __div_16_1_00003_arg_a, F
02F8  09BA  	COMF __div_16_1_00003_arg_a+D'1', F
02F9  0AB9  	INCF __div_16_1_00003_arg_a, F
02FA  1903  	BTFSC STATUS,Z
02FB  0ABA  	INCF __div_16_1_00003_arg_a+D'1', F
02FC  0ABD  	INCF CompTempVar2202, F
02FD        label44
02FD  3010  	MOVLW 0x10
02FE  00BB  	MOVWF __div_16_1_00003_arg_b
02FF  3027  	MOVLW 0x27
0300  00BC  	MOVWF __div_16_1_00003_arg_b+D'1'
0301  20EE  	CALL __div_16_1_00003
0302  0842  	MOVF CompTempVarRet214, W
0303  00B8  	MOVWF FCD_LCDDis_00059_1_tmp_byte
0304  1C3D  	BTFSS CompTempVar2202,0
0305  2B08  	GOTO	label45
0306  09B8  	COMF FCD_LCDDis_00059_1_tmp_byte, F
0307  0AB8  	INCF FCD_LCDDis_00059_1_tmp_byte, F
0308        label45

			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);
0308  0838  	MOVF FCD_LCDDis_00059_1_tmp_byte, W
0309  3E30  	ADDLW 0x30
030A  00C4  	MOVWF FCD_LCDDis_00055_arg_in
030B  3010  	MOVLW 0x10
030C  00C5  	MOVWF FCD_LCDDis_00055_arg_mask
030D  2083  	CALL FCD_LCDDis_00055


			while (tmp_byte > 0)
030E        label46
030E  0838  	MOVF FCD_LCDDis_00059_1_tmp_byte, W
030F  3C00  	SUBLW 0x00
0310  1803  	BTFSC STATUS,C
0311  2B1A  	GOTO	label47
0319  2B0E  	GOTO	label46
031A        label47

			{
				tmp_int = tmp_int - 10000;
0312  3010  	MOVLW 0x10
0313  02B6  	SUBWF FCD_LCDDis_00059_1_tmp_int, F
0314  3027  	MOVLW 0x27
0315  1C03  	BTFSS STATUS,C
0316  3028  	MOVLW 0x28
0317  02B7  	SUBWF FCD_LCDDis_00059_1_tmp_int+D'1', F

				tmp_byte--;
0318  03B8  	DECF FCD_LCDDis_00059_1_tmp_byte, F

			}
		}
		if (Number >= 1000)
031A  3003  	MOVLW 0x03
031B  0235  	SUBWF FCD_LCDDis_00059_arg_Number+D'1', W
031C  1D03  	BTFSS STATUS,Z
031D  2B20  	GOTO	label48
031E  30E8  	MOVLW 0xE8
031F  0234  	SUBWF FCD_LCDDis_00059_arg_Number, W
0320        label48
0320  1C03  	BTFSS STATUS,C
0321  2B50  	GOTO	label52
0322  1BB5  	BTFSC FCD_LCDDis_00059_arg_Number+D'1',7
0323  2B50  	GOTO	label52

		{
			tmp_byte = tmp_int / 1000;
0324  01BE  	CLRF CompTempVar2206
0325  0836  	MOVF FCD_LCDDis_00059_1_tmp_int, W
0326  00B9  	MOVWF __div_16_1_00003_arg_a
0327  0837  	MOVF FCD_LCDDis_00059_1_tmp_int+D'1', W
0328  00BA  	MOVWF __div_16_1_00003_arg_a+D'1'
0329  1FB7  	BTFSS FCD_LCDDis_00059_1_tmp_int+D'1',7
032A  2B31  	GOTO	label49
032B  09B9  	COMF __div_16_1_00003_arg_a, F
032C  09BA  	COMF __div_16_1_00003_arg_a+D'1', F
032D  0AB9  	INCF __div_16_1_00003_arg_a, F
032E  1903  	BTFSC STATUS,Z
032F  0ABA  	INCF __div_16_1_00003_arg_a+D'1', F
0330  0ABE  	INCF CompTempVar2206, F
0331        label49
0331  30E8  	MOVLW 0xE8
0332  00BB  	MOVWF __div_16_1_00003_arg_b
0333  3003  	MOVLW 0x03
0334  00BC  	MOVWF __div_16_1_00003_arg_b+D'1'
0335  20EE  	CALL __div_16_1_00003
0336  0842  	MOVF CompTempVarRet214, W
0337  00BD  	MOVWF CompTempVar2205
0338  1C3E  	BTFSS CompTempVar2206,0
0339  2B3C  	GOTO	label50
033A  09BD  	COMF CompTempVar2205, F
033B  0ABD  	INCF CompTempVar2205, F
033C        label50
033C  083D  	MOVF CompTempVar2205, W
033D  00B8  	MOVWF FCD_LCDDis_00059_1_tmp_byte

			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);
033E  0838  	MOVF FCD_LCDDis_00059_1_tmp_byte, W
033F  3E30  	ADDLW 0x30
0340  00C4  	MOVWF FCD_LCDDis_00055_arg_in
0341  3010  	MOVLW 0x10
0342  00C5  	MOVWF FCD_LCDDis_00055_arg_mask
0343  2083  	CALL FCD_LCDDis_00055


			while (tmp_byte > 0)
0344        label51
0344  0838  	MOVF FCD_LCDDis_00059_1_tmp_byte, W
0345  3C00  	SUBLW 0x00
0346  1803  	BTFSC STATUS,C
0347  2B50  	GOTO	label52
034F  2B44  	GOTO	label51
0350        label52

			{
				tmp_int = tmp_int - 1000;
0348  30E8  	MOVLW 0xE8
0349  02B6  	SUBWF FCD_LCDDis_00059_1_tmp_int, F
034A  3003  	MOVLW 0x03
034B  1C03  	BTFSS STATUS,C
034C  3004  	MOVLW 0x04
034D  02B7  	SUBWF FCD_LCDDis_00059_1_tmp_int+D'1', F

				tmp_byte--;
034E  03B8  	DECF FCD_LCDDis_00059_1_tmp_byte, F

			}
		}
		if (Number >= 100)
0350  0835  	MOVF FCD_LCDDis_00059_arg_Number+D'1', W
0351  3A80  	XORLW 0x80
0352  00B9  	MOVWF CompTempVar2209
0353  3080  	MOVLW 0x80
0354  0239  	SUBWF CompTempVar2209, W
0355  1D03  	BTFSS STATUS,Z
0356  2B59  	GOTO	label53
0357  3064  	MOVLW 0x64
0358  0234  	SUBWF FCD_LCDDis_00059_arg_Number, W
0359        label53
0359  1C03  	BTFSS STATUS,C
035A  2B85  	GOTO	label57

		{
			tmp_byte = tmp_int / 100;
035B  01BE  	CLRF CompTempVar2211
035C  0836  	MOVF FCD_LCDDis_00059_1_tmp_int, W
035D  00B9  	MOVWF __div_16_1_00003_arg_a
035E  0837  	MOVF FCD_LCDDis_00059_1_tmp_int+D'1', W
035F  00BA  	MOVWF __div_16_1_00003_arg_a+D'1'
0360  1FB7  	BTFSS FCD_LCDDis_00059_1_tmp_int+D'1',7
0361  2B68  	GOTO	label54
0362  09B9  	COMF __div_16_1_00003_arg_a, F
0363  09BA  	COMF __div_16_1_00003_arg_a+D'1', F
0364  0AB9  	INCF __div_16_1_00003_arg_a, F
0365  1903  	BTFSC STATUS,Z
0366  0ABA  	INCF __div_16_1_00003_arg_a+D'1', F
0367  0ABE  	INCF CompTempVar2211, F
0368        label54
0368  3064  	MOVLW 0x64
0369  00BB  	MOVWF __div_16_1_00003_arg_b
036A  01BC  	CLRF __div_16_1_00003_arg_b+D'1'
036B  20EE  	CALL __div_16_1_00003
036C  0842  	MOVF CompTempVarRet214, W
036D  00BD  	MOVWF CompTempVar2210
036E  1C3E  	BTFSS CompTempVar2211,0
036F  2B72  	GOTO	label55
0370  09BD  	COMF CompTempVar2210, F
0371  0ABD  	INCF CompTempVar2210, F
0372        label55
0372  083D  	MOVF CompTempVar2210, W
0373  00B8  	MOVWF FCD_LCDDis_00059_1_tmp_byte

			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);
0374  0838  	MOVF FCD_LCDDis_00059_1_tmp_byte, W
0375  3E30  	ADDLW 0x30
0376  00C4  	MOVWF FCD_LCDDis_00055_arg_in
0377  3010  	MOVLW 0x10
0378  00C5  	MOVWF FCD_LCDDis_00055_arg_mask
0379  2083  	CALL FCD_LCDDis_00055


			while (tmp_byte > 0)
037A        label56
037A  0838  	MOVF FCD_LCDDis_00059_1_tmp_byte, W
037B  3C00  	SUBLW 0x00
037C  1803  	BTFSC STATUS,C
037D  2B85  	GOTO	label57
0384  2B7A  	GOTO	label56
0385        label57

			{
				tmp_int = tmp_int - 100;
037E  3064  	MOVLW 0x64
037F  02B6  	SUBWF FCD_LCDDis_00059_1_tmp_int, F
0380  08B7  	MOVF FCD_LCDDis_00059_1_tmp_int+D'1', F
0381  1C03  	BTFSS STATUS,C
0382  03B7  	DECF FCD_LCDDis_00059_1_tmp_int+D'1', F

				tmp_byte--;
0383  03B8  	DECF FCD_LCDDis_00059_1_tmp_byte, F

			}
		}
		if (Number >= 10)
0385  0835  	MOVF FCD_LCDDis_00059_arg_Number+D'1', W
0386  3A80  	XORLW 0x80
0387  00B9  	MOVWF CompTempVar2214
0388  3080  	MOVLW 0x80
0389  0239  	SUBWF CompTempVar2214, W
038A  1D03  	BTFSS STATUS,Z
038B  2B8E  	GOTO	label58
038C  300A  	MOVLW 0x0A
038D  0234  	SUBWF FCD_LCDDis_00059_arg_Number, W
038E        label58
038E  1C03  	BTFSS STATUS,C
038F  2BBA  	GOTO	label62

		{
			tmp_byte = tmp_int / 10;
0390  01BE  	CLRF CompTempVar2216
0391  0836  	MOVF FCD_LCDDis_00059_1_tmp_int, W
0392  00B9  	MOVWF __div_16_1_00003_arg_a
0393  0837  	MOVF FCD_LCDDis_00059_1_tmp_int+D'1', W
0394  00BA  	MOVWF __div_16_1_00003_arg_a+D'1'
0395  1FB7  	BTFSS FCD_LCDDis_00059_1_tmp_int+D'1',7
0396  2B9D  	GOTO	label59
0397  09B9  	COMF __div_16_1_00003_arg_a, F
0398  09BA  	COMF __div_16_1_00003_arg_a+D'1', F
0399  0AB9  	INCF __div_16_1_00003_arg_a, F
039A  1903  	BTFSC STATUS,Z
039B  0ABA  	INCF __div_16_1_00003_arg_a+D'1', F
039C  0ABE  	INCF CompTempVar2216, F
039D        label59
039D  300A  	MOVLW 0x0A
039E  00BB  	MOVWF __div_16_1_00003_arg_b
039F  01BC  	CLRF __div_16_1_00003_arg_b+D'1'
03A0  20EE  	CALL __div_16_1_00003
03A1  0842  	MOVF CompTempVarRet214, W
03A2  00BD  	MOVWF CompTempVar2215
03A3  1C3E  	BTFSS CompTempVar2216,0
03A4  2BA7  	GOTO	label60
03A5  09BD  	COMF CompTempVar2215, F
03A6  0ABD  	INCF CompTempVar2215, F
03A7        label60
03A7  083D  	MOVF CompTempVar2215, W
03A8  00B8  	MOVWF FCD_LCDDis_00059_1_tmp_byte

			FCD_LCDDisplay0_RawSend('0' + tmp_byte, 0x10);
03A9  0838  	MOVF FCD_LCDDis_00059_1_tmp_byte, W
03AA  3E30  	ADDLW 0x30
03AB  00C4  	MOVWF FCD_LCDDis_00055_arg_in
03AC  3010  	MOVLW 0x10
03AD  00C5  	MOVWF FCD_LCDDis_00055_arg_mask
03AE  2083  	CALL FCD_LCDDis_00055


			while (tmp_byte > 0)
03AF        label61
03AF  0838  	MOVF FCD_LCDDis_00059_1_tmp_byte, W
03B0  3C00  	SUBLW 0x00
03B1  1803  	BTFSC STATUS,C
03B2  2BBA  	GOTO	label62
03B9  2BAF  	GOTO	label61
03BA        label62

			{
				tmp_int = tmp_int - 10;
03B3  300A  	MOVLW 0x0A
03B4  02B6  	SUBWF FCD_LCDDis_00059_1_tmp_int, F
03B5  08B7  	MOVF FCD_LCDDis_00059_1_tmp_int+D'1', F
03B6  1C03  	BTFSS STATUS,C
03B7  03B7  	DECF FCD_LCDDis_00059_1_tmp_int+D'1', F

				tmp_byte--;
03B8  03B8  	DECF FCD_LCDDis_00059_1_tmp_byte, F

			}
		}
		FCD_LCDDisplay0_RawSend('0' + tmp_int, 0x10);
03BA  0836  	MOVF FCD_LCDDis_00059_1_tmp_int, W
03BB  3E30  	ADDLW 0x30
03BC  00C4  	MOVWF FCD_LCDDis_00055_arg_in
03BD  3010  	MOVLW 0x10
03BE  00C5  	MOVWF FCD_LCDDis_00055_arg_mask
03BF  2083  	CALL FCD_LCDDis_00055


}
03C0  0008  	RETURN


void FCD_LCDDisplay0_PrintString(MX_STRING String, MX_UINT8 MSZ_String)

{
	
		MX_UINT8 idx = 0;
01A6  01C3  	CLRF FCD_LCDDis_00053_1_idx


		for (idx=0; idx<MSZ_String; idx++)
01A7  01C3  	CLRF FCD_LCDDis_00053_1_idx
01A8        label29
01A8  0842  	MOVF FCD_LCDDis_00053_arg_MSZ_String, W
01A9  0243  	SUBWF FCD_LCDDis_00053_1_idx, W
01AA  1803  	BTFSC STATUS,C
01C0  0AC3  	INCF FCD_LCDDis_00053_1_idx, F
01C1  29A8  	GOTO	label29

		{
			if (String[idx] == 0)
01AC  1383  	BCF STATUS,IRP
01AD  1835  	BTFSC FCD_LCDDis_00053_arg_String+D'1',0
01AE  1783  	BSF STATUS,IRP
01AF  0834  	MOVF FCD_LCDDis_00053_arg_String, W
01B0  0743  	ADDWF FCD_LCDDis_00053_1_idx, W
01B1  0084  	MOVWF FSR
01B2  0880  	MOVF INDF, F
01B3  1903  	BTFSC STATUS,Z

			{
				break;

			}
			FCD_LCDDisplay0_RawSend(String[idx], 0x10);
01B5  1383  	BCF STATUS,IRP
01B6  1835  	BTFSC FCD_LCDDis_00053_arg_String+D'1',0
01B7  1783  	BSF STATUS,IRP
01B8  0834  	MOVF FCD_LCDDis_00053_arg_String, W
01B9  0743  	ADDWF FCD_LCDDis_00053_1_idx, W
01BA  0084  	MOVWF FSR
01BB  0800  	MOVF INDF, W
01BC  00C4  	MOVWF FCD_LCDDis_00055_arg_in
01BD  3010  	MOVLW 0x10
01BE  00C5  	MOVWF FCD_LCDDis_00055_arg_mask
01BF  2083  	CALL FCD_LCDDis_00055

		}

}
01AB  0008  	RETURN
01B4  0008  	RETURN


void FCD_LCDDisplay0_ScrollDisplay(MX_UINT8 Direction, MX_UINT8 Num_Positions)
{
	
		MX_UINT8 cmd = 0;
		MX_UINT8 count;

		//Choose the direction
		switch (Direction)
		{
			case 0:
			case 'l':
			case 'L':

				cmd = 0x18;
				break;

			case 1:
			case 'r':
			case 'R':

				cmd = 0x1C;
				break;

			default:
				break;
		}

		//If direction accepted then scroll the specified amount
		if (cmd)
		{
			for (count = 0; count < Num_Positions; count++)
				FCD_LCDDisplay0_Command(cmd);
		}

}

void FCD_LCDDisplay0_ClearLine(MX_UINT8 Line)
{
	
		MX_UINT8 count;
		MX_UINT8 rowcount;

		//Define number of columns per line
		#if (LCD_1__ROWCNT == 1)
			rowcount=80;
		#endif

		#if (LCD_1__ROWCNT == 2)
			rowcount=40;
		#endif

		#if (LCD_1__ROWCNT == 4)
			#if (LCD_1__COLCNT == 16)
				rowcount=16;
			#endif
			#if (LCD_1__COLCNT == 20)
				rowcount=20;
			#endif
		#endif

		//Start at beginning of the line
		FCD_LCDDisplay0_Cursor (0, Line);

		//Send out spaces to clear line
		for (count = 0; count < rowcount; count++)
			FCD_LCDDisplay0_RawSend(' ', 0x10);

		//Move back to the beginning of the line.
		FCD_LCDDisplay0_Cursor (0, Line);

}

void FCD_LCDDisplay0_RAM_Write(MX_UINT8 nIdx, MX_UINT8 d0, MX_UINT8 d1, MX_UINT8 d2, MX_UINT8 d3, MX_UINT8 d4, MX_UINT8 d5, MX_UINT8 d6, MX_UINT8 d7)
{
	   //set CGRAM address

	   FCD_LCDDisplay0_RawSend(64 + (nIdx << 3), 0);
	   delay_ms(2);

	   //write CGRAM data
	   FCD_LCDDisplay0_RawSend(d0, 0x10);
	   FCD_LCDDisplay0_RawSend(d1, 0x10);
	   FCD_LCDDisplay0_RawSend(d2, 0x10);
	   FCD_LCDDisplay0_RawSend(d3, 0x10);
	   FCD_LCDDisplay0_RawSend(d4, 0x10);
	   FCD_LCDDisplay0_RawSend(d5, 0x10);
	   FCD_LCDDisplay0_RawSend(d6, 0x10);
	   FCD_LCDDisplay0_RawSend(d7, 0x10);

	   //Clear the display
	   FCD_LCDDisplay0_RawSend(0x01, 0);
	   delay_ms(2);
	   FCD_LCDDisplay0_RawSend(0x02, 0);
	   delay_ms(2);

}



//One_Wire(0): //Macro implementations


void FCD_One_Wire0_oo_crc_shuffle_byte(MX_UINT8 input)
{
	
		#if OO_CRC_EN == 1
			ONEWIRE_2_oo_crc = OO_CRC_ROM[ONEWIRE_2_oo_crc ^ input];
		#endif

}

void FCD_One_Wire0_oo_crc_init()
{
	
		#if OO_CRC_EN == 1
			ONEWIRE_2_oo_crc = 0;
		#endif

}

MX_UINT8 FCD_One_Wire0_rx_bit()

{
	
		MX_UINT8 oo_bit, count;
		ONEWIRE_2_Clear_OO;						//Clear Output Pin
006B  1683  	BSF STATUS, RP0
006C  1303  	BCF STATUS, RP1
006D  1085  	BCF gbl_trisa,1
006E  1283  	BCF STATUS, RP0
006F  1085  	BCF gbl_porta,1

		delay_us(1);						//Delay 1us
0070  3001  	MOVLW 0x01
0071  1683  	BSF STATUS, RP0
0072  00BB  	MOVWF delay_us_00000_arg_del
0073  2010  	CALL delay_us_00000

		ONEWIRE_2_Float_OO;						//Float Output Pin
0074  1485  	BSF gbl_trisa,1

		delay_us(10);						//Delay 10us
0075  300A  	MOVLW 0x0A
0076  00BB  	MOVWF delay_us_00000_arg_del
0077  2010  	CALL delay_us_00000

		oo_bit = FC_CAL_Bit_In( ONEWIRE_2_OO_PORT , ONEWIRE_2_OO_PIN );				//Test Input
0078  3002  	MOVLW 0x02
0079  1283  	BCF STATUS, RP0
007A  0505  	ANDWF gbl_porta, W
007B  1683  	BSF STATUS, RP0
007C  00BA  	MOVWF FCD_One_Wi_00060_1_oo_bit

		delay_us(50);						//Delay 50us
007D  3032  	MOVLW 0x32
007E  00BB  	MOVWF delay_us_00000_arg_del
007F  2010  	CALL delay_us_00000

		return oo_bit;
0080  083A  	MOVF FCD_One_Wi_00060_1_oo_bit, W
0081  00BB  	MOVWF CompTempVarRet2223


}
0082  0008  	RETURN


void FCD_One_Wire0_tx_bit(MX_UINT8 out)

{
	
		MX_UINT8 count;
		ONEWIRE_2_Clear_OO;						//Clear Output Pin
005A  1085  	BCF gbl_trisa,1
005B  1283  	BCF STATUS, RP0
005C  1085  	BCF gbl_porta,1

		delay_us(1);						//Delay 1us
005D  3001  	MOVLW 0x01
005E  1683  	BSF STATUS, RP0
005F  00BB  	MOVWF delay_us_00000_arg_del
0060  2010  	CALL delay_us_00000

		if (out & 0x01)
0061  1839  	BTFSC FCD_One_Wi_00061_arg_out,0

			ONEWIRE_2_Float_OO;					//Float Output Pin
0062  1485  	BSF gbl_trisa,1

		delay_us(60);						//Delay 60us
0063  303C  	MOVLW 0x3C
0064  00BB  	MOVWF delay_us_00000_arg_del
0065  2010  	CALL delay_us_00000

		ONEWIRE_2_Float_OO;						//Float Output Pin
0066  1485  	BSF gbl_trisa,1

		delay_us(10);						//Delay 10us
0067  300A  	MOVLW 0x0A
0068  00BB  	MOVWF delay_us_00000_arg_del
0069  2010  	CALL delay_us_00000


}
006A  0008  	RETURN


MX_UINT8 FCD_One_Wire0_oo_get_next_id()
{
	
		MX_UINT8 val0 = 0;
		MX_UINT8 val1 = 0;
		MX_UINT8 counter    = 0;
		MX_UINT8 bit_index  = 0;
		MX_UINT8 byte_index = 0;
		MX_UINT8 data_in_byte = 0;
		//MX_UINT8 current_ONEWIRE_2_oo_conflict = -1;

		//added JCMB 10/01/09
		MX_UINT8 lz_selected = 0;
		MX_UINT8 go_on = 0;
		MX_UINT8 bit_test;

		ONEWIRE_2_oo_new_conflict = 0;

		if ( FCD_One_Wire0_oo_busreset() )	// Reset the bus
		{
			return 1; // -> error
		}
		// Issue the search ROM command
		FCD_One_Wire0_oo_tx_byte(OO_SEARCHROM);

		// Start the search for the sensor
		for (byte_index = 0; byte_index < 8; byte_index++)
		{
			data_in_byte = 0;
			for (bit_index = 0; bit_index < 8; bit_index++)
			{
				// Read 2 consecutive bits from the One Wire bus
				val0 = FCD_One_Wire0_rx_bit();						//Test Input
				val1 = FCD_One_Wire0_rx_bit();						//Test Input

				// Evaluate the result
				if ((val0 == 0) && (val1 == 0))
				{
					//current_ONEWIRE_2_oo_conflict = counter;
					// if ONEWIRE_2_oo_conflict occurs earlier than the previous ONEWIRE_2_oo_conflict, then use the previous value
					if (counter < ONEWIRE_2_oo_conflict)
					{
						// use previous value
						bit_test = ONEWIRE_2_oo_id[byte_index] >> bit_index;		//added JCMB 10/01/09
						if (bit_test & 0x01)
						{
							val0 = 1;
						}
						else
						{
							val0 = 0;
							lz_selected = counter;				//added JCMB 10/01/09
							go_on = 1;							//added JCMB 10/01/09
						}
					}
					else if (counter == ONEWIRE_2_oo_conflict)
					{
						// use 1
						val0 = 1;
					}
					else
					{
						// use zero on new ONEWIRE_2_oo_conflicts
						val0 = 0;
						ONEWIRE_2_oo_conflict = counter;
						ONEWIRE_2_oo_new_conflict = 1;
					}
				}
				else if (val0 && val1) // 1 et 1 impossible
				{
					return 2;
				}
				// Store the bit in the ID array
				data_in_byte = data_in_byte >> 1;
				if (val0)
				{
					data_in_byte |= 0x80;
				}

				FCD_One_Wire0_tx_bit(val0);

				counter++;
			}
			ONEWIRE_2_oo_id[byte_index] = data_in_byte;
		}

	        //added JCMB 10/01/09
		if ((ONEWIRE_2_oo_new_conflict == 0) && go_on)
		{
			ONEWIRE_2_oo_new_conflict = 1;
			ONEWIRE_2_oo_conflict = lz_selected ;
		}

		// Verify ID CRC
		#if OO_CRC_EN == 1
			FCD_One_Wire0_oo_crc_init();
		#endif

		for (byte_index = 0; byte_index < 8; byte_index++)
		{
			#if OO_CRC_EN == 1
					FCD_One_Wire0_oo_crc_shuffle_byte(ONEWIRE_2_oo_id[byte_index]);
			#endif
		}
		// Bail on CRC errors
	  #if OO_CRC_EN == 1
		if (ONEWIRE_2_oo_crc) return ONEWIRE_2_oo_crc;
	  #endif
		return 0;

}

MX_UINT8 FCD_One_Wire0_oo_busreset()

{
	
		ONEWIRE_2_Float_OO; 					// Release bus
016B  1683  	BSF STATUS, RP0
016C  1303  	BCF STATUS, RP1
016D  1485  	BSF gbl_trisa,1

		ONEWIRE_2_Clear_OO;					// Send the reset pulse
016E  1085  	BCF gbl_trisa,1
016F  1283  	BCF STATUS, RP0
0170  1085  	BCF gbl_porta,1

		delay_us(200);					// Wait for 600 µs, this is the reset pulse
0171  30C8  	MOVLW 0xC8
0172  1683  	BSF STATUS, RP0
0173  00BB  	MOVWF delay_us_00000_arg_del
0174  2010  	CALL delay_us_00000

		delay_us(200);
0175  30C8  	MOVLW 0xC8
0176  00BB  	MOVWF delay_us_00000_arg_del
0177  2010  	CALL delay_us_00000

		delay_us(200);
0178  30C8  	MOVLW 0xC8
0179  00BB  	MOVWF delay_us_00000_arg_del
017A  2010  	CALL delay_us_00000

		ONEWIRE_2_Float_OO; 					// Release bus
017B  1485  	BSF gbl_trisa,1

		delay_us(60);					// Wait 60 us (release) let device drive the bus
017C  303C  	MOVLW 0x3C
017D  00BB  	MOVWF delay_us_00000_arg_del
017E  2010  	CALL delay_us_00000

		if (FC_CAL_Bit_In( ONEWIRE_2_OO_PORT, ONEWIRE_2_OO_PIN ) == 1)			// Now sample, if there is a sensor on the bus, the line should be low
017F  3002  	MOVLW 0x02
0180  1283  	BCF STATUS, RP0
0181  0505  	ANDWF gbl_porta, W
0182  1683  	BSF STATUS, RP0
0183  00B6  	MOVWF CompTempVar2232
0184  0336  	DECF CompTempVar2232, W
0185  1D03  	BTFSS STATUS,Z
0186  298A  	GOTO	label28
018A        label28

			return 1; 					// <<-error
0187  3001  	MOVLW 0x01
0188  00B7  	MOVWF CompTempVarRet2231

		delay_us(140);					// Wait another 540 us to complete the reset sequence
018A  308C  	MOVLW 0x8C
018B  00BB  	MOVWF delay_us_00000_arg_del
018C  2010  	CALL delay_us_00000

		delay_us(200);
018D  30C8  	MOVLW 0xC8
018E  00BB  	MOVWF delay_us_00000_arg_del
018F  2010  	CALL delay_us_00000

		delay_us(200);
0190  30C8  	MOVLW 0xC8
0191  00BB  	MOVWF delay_us_00000_arg_del
0192  2010  	CALL delay_us_00000

		return 0;
0193  01B7  	CLRF CompTempVarRet2231


}
0189  0008  	RETURN
0194  0008  	RETURN


MX_UINT8 FCD_One_Wire0_oo_get_pad_byte(MX_UINT8 index)
{
	
		return ONEWIRE_2_oo_scratchpad[index];

}

void FCD_One_Wire0_oo_tx_byte(MX_UINT8 data)

{
	
		MX_UINT8 counter = 0;
015E  01B8  	CLRF FCD_One_Wi_00064_1_counter

		while (counter < 8)
015F        label27
015F  3008  	MOVLW 0x08
0160  0238  	SUBWF FCD_One_Wi_00064_1_counter, W
0161  1803  	BTFSC STATUS,C
016A  295F  	GOTO	label27

		{
			FCD_One_Wire0_tx_bit(data);
0163  0837  	MOVF FCD_One_Wi_00064_arg_data, W
0164  00B9  	MOVWF FCD_One_Wi_00061_arg_out
0165  205A  	CALL FCD_One_Wi_00061

			data = data >> 1;				//Rotate to next bit of data
0166  08B7  	MOVF FCD_One_Wi_00064_arg_data, F
0167  1003  	BCF STATUS,C
0168  0CB7  	RRF FCD_One_Wi_00064_arg_data, F

			counter++;						//Increment Counter
0169  0AB8  	INCF FCD_One_Wi_00064_1_counter, F

		}

}
0162  0008  	RETURN


MX_UINT8 FCD_One_Wire0_oo_rx_byte()

{
	
		MX_UINT8 counter = 0;
0143  1683  	BSF STATUS, RP0
0144  1303  	BCF STATUS, RP1
0145  01B7  	CLRF FCD_One_Wi_00066_1_counter

		MX_UINT8 data    = 0;
0146  01B8  	CLRF FCD_One_Wi_00066_1_data

		MX_UINT8 oo_bit  = 0;
0147  01B9  	CLRF FCD_One_Wi_00066_1_oo_bit

		while (counter < 8)
0148        label24
0148  3008  	MOVLW 0x08
0149  0237  	SUBWF FCD_One_Wi_00066_1_counter, W
014A  1803  	BTFSC STATUS,C
014B  295B  	GOTO	label26
015A  2948  	GOTO	label24
015B        label26

		{
			oo_bit = FCD_One_Wire0_rx_bit();
014C  206B  	CALL FCD_One_Wi_00060
014D  083B  	MOVF CompTempVarRet2223, W
014E  00B9  	MOVWF FCD_One_Wi_00066_1_oo_bit

			data = data >> 1;					//Shift incoming data to next bit
014F  08B8  	MOVF FCD_One_Wi_00066_1_data, F
0150  1003  	BCF STATUS,C
0151  0CB8  	RRF FCD_One_Wi_00066_1_data, F

			if (oo_bit > 0)
0152  0839  	MOVF FCD_One_Wi_00066_1_oo_bit, W
0153  3C00  	SUBLW 0x00
0154  1803  	BTFSC STATUS,C
0155  2959  	GOTO	label25
0159        label25

			{
				data = data | 0x80;				//Append incoming bit to data byte
0156  3080  	MOVLW 0x80
0157  0438  	IORWF FCD_One_Wi_00066_1_data, W
0158  00B8  	MOVWF FCD_One_Wi_00066_1_data

			}
			counter++;							//Increment Counter
0159  0AB7  	INCF FCD_One_Wi_00066_1_counter, F

		}
		#ifdef OO_OO_CRC_EN
			FCD_One_Wire0_oo_crc_shuffle_byte(data);			//Check CRC
		#endif
		return data;
015B  0838  	MOVF FCD_One_Wi_00066_1_data, W
015C  00BA  	MOVWF CompTempVarRet2237


}
015D  0008  	RETURN


MX_UINT8 FCD_One_Wire0_oo_scanbus()
{
	
		MX_UINT8 retval = 0;
		MX_UINT8 device_count = 0;
		MX_UINT8 loper;
		ONEWIRE_2_oo_conflict = -1;
		ONEWIRE_2_oo_new_conflict = 1;
		// Reset the bus, wake up devices.
		retval = FCD_One_Wire0_oo_busreset();
		if (retval == 1)
		{
			return 255; // -> error
		}
		// ONEWIRE_2_oo_new_conflict gets updated in the FCD_One_Wire0_oo_get_next_id() function.
		while (ONEWIRE_2_oo_new_conflict)
		{
			retval = FCD_One_Wire0_oo_get_next_id();
			// Bail in case of errors
			if (retval) return retval;
			// Add the device ONEWIRE_2_oo_id to EEPROM
			for (loper=0; loper < 8; loper++)
			{
				ONEWIRE_2_oo_DevID[loper+(device_count<<3)] = ONEWIRE_2_oo_id[loper];
			}
			device_count++;
		}
		// Write number of devices to the EEPROM
		ONEWIRE_2_oo_num_devices = device_count;
		return 0;

}

MX_UINT8 FCD_One_Wire0_oo_get_devicecount()
{
	
		return ONEWIRE_2_oo_num_devices;

}

MX_UINT8 FCD_One_Wire0_oo_read_device(MX_UINT8 count)
{
	
		MX_UINT8 loper = 0;
		MX_UINT8 counter = 0;
		MX_UINT8 temp;
		MX_UINT16 value;

		FCD_One_Wire0_oo_busreset();
		FCD_One_Wire0_oo_tx_byte(OO_MATCHROM);
		for (loper=0; loper < 8; loper++)
		{
			ONEWIRE_2_oo_DevID[loper] = ONEWIRE_2_oo_id[loper+(count<<3)];
			FCD_One_Wire0_oo_tx_byte(ONEWIRE_2_oo_id[loper]);
		}
		FCD_One_Wire0_oo_tx_byte(OO_READPAD);
		#if OO_CRC_EN == 1
			FCD_One_Wire0_oo_crc_init();			//Reset the CRC register, CRC is updated in the FCD_One_Wire0_oo_rx_byte() function.
		#endif
		while (counter < 9)
		{
			temp = FCD_One_Wire0_oo_rx_byte();
			ONEWIRE_2_oo_scratchpad[counter] = temp;
			counter++;
		}
		#if OO_CRC_EN == 1
			return ONEWIRE_2_oo_crc;				//Verify the CRC
		#endif
		return 0;

}

MX_UINT8 FCD_One_Wire0_oo_get_IDByte(MX_UINT8 device, MX_UINT8 octet)
{
	
		MX_UINT8 retval = 255;

		if ((device >= ONEWIRE_2_oo_num_devices) | (octet > 7))
		{
			return retval ; //error
		}
	        retval = ONEWIRE_2_oo_DevID[octet+(device<<3)];
		return retval ;

}

MX_UINT8 FCD_One_Wire0_DS1820_start_conversion()

{
	
		MX_UINT8 in = 0;
02B6  1683  	BSF STATUS, RP0
02B7  1303  	BCF STATUS, RP1
02B8  01B4  	CLRF FCD_One_Wi_0006B_1_in

		MX_UINT8 counter = 0;
02B9  01B5  	CLRF FCD_One_Wi_0006B_1_counter


		FCD_One_Wire0_oo_busreset();
02BA  216B  	CALL FCD_One_Wi_00063

		FCD_One_Wire0_oo_tx_byte(OO_SKIPROM);		// Command all temp sensors on the bus to start a conversion
02BB  30CC  	MOVLW 0xCC
02BC  00B7  	MOVWF FCD_One_Wi_00064_arg_data
02BD  215E  	CALL FCD_One_Wi_00064

		FCD_One_Wire0_oo_tx_byte(OO_CONVERTT);	// Convert temperature
02BE  3044  	MOVLW 0x44
02BF  00B7  	MOVWF FCD_One_Wi_00064_arg_data
02C0  215E  	CALL FCD_One_Wi_00064

		while (in == 0)
02C1        label40
02C1  08B4  	MOVF FCD_One_Wi_0006B_1_in, F
02C2  1D03  	BTFSS STATUS,Z
02C3  2AD1  	GOTO	label41
02D1        label41

		{
			in = FCD_One_Wire0_oo_rx_byte();
02C4  2143  	CALL FCD_One_Wi_00066
02C5  083A  	MOVF CompTempVarRet2237, W
02C6  00B4  	MOVWF FCD_One_Wi_0006B_1_in

			delay_ms(4);
02C7  3004  	MOVLW 0x04
02C8  00B8  	MOVWF delay_ms_00000_arg_del
02C9  201A  	CALL delay_ms_00000

			counter++;
02CA  0AB5  	INCF FCD_One_Wi_0006B_1_counter, F

			if (counter == 0xFF)		// Security: if the conversion is not completed
02CB  0A35  	INCF FCD_One_Wi_0006B_1_counter, W
02CC  1D03  	BTFSS STATUS,Z
02CD  2AC1  	GOTO	label40

				return 1;				// after > 1 sec -> break.
02CE  3001  	MOVLW 0x01
02CF  00B6  	MOVWF CompTempVarRet2282

		}
		return 0;
02D1  01B6  	CLRF CompTempVarRet2282


}
02D0  0008  	RETURN
02D2  0008  	RETURN


MX_UINT8 FCD_One_Wire0_DS1820_read_scratchpad()

{
	
		MX_UINT8 temp;
		MX_UINT8 counter = 0;
0292  1683  	BSF STATUS, RP0
0293  1303  	BCF STATUS, RP1
0294  01B5  	CLRF FCD_One_Wi_0006C_1_counter


		if ( FCD_One_Wire0_oo_busreset() )
0295  216B  	CALL FCD_One_Wi_00063
0296  08B7  	MOVF CompTempVarRet2231, F
0297  1903  	BTFSC STATUS,Z
0298  2A9C  	GOTO	label37
029C        label37

			return (1);
0299  3001  	MOVLW 0x01
029A  00B6  	MOVWF CompTempVarRet2283

		FCD_One_Wire0_oo_tx_byte(OO_SKIPROM);		//Command all temp sensors on the bus to start a conversion
029C  30CC  	MOVLW 0xCC
029D  00B7  	MOVWF FCD_One_Wi_00064_arg_data
029E  215E  	CALL FCD_One_Wi_00064

		FCD_One_Wire0_oo_tx_byte(OO_READPAD);		//Convert temperature
029F  30BE  	MOVLW 0xBE
02A0  00B7  	MOVWF FCD_One_Wi_00064_arg_data
02A1  215E  	CALL FCD_One_Wi_00064

		#if OO_CRC_EN == 1
			FCD_One_Wire0_oo_crc_init();			//Reset the CRC register, CRC is updated in the FCD_One_Wire0_oo_rx_byte() function.
		#endif
		while (counter < 9)
02A2        label38
02A2  3009  	MOVLW 0x09
02A3  0235  	SUBWF FCD_One_Wi_0006C_1_counter, W
02A4  1803  	BTFSC STATUS,C
02A5  2AB4  	GOTO	label39
02B3  2AA2  	GOTO	label38
02B4        label39

		{
			temp = FCD_One_Wire0_oo_rx_byte();
02A6  2143  	CALL FCD_One_Wi_00066
02A7  083A  	MOVF CompTempVarRet2237, W
02A8  00B4  	MOVWF FCD_One_Wi_0006C_1_temp

			ONEWIRE_2_oo_scratchpad[counter] = temp;
02A9  1283  	BCF STATUS, RP0
02AA  1383  	BCF	STATUS,IRP
02AB  3060  	MOVLW LOW(gbl_ONEWIRE_2_oo_scratchpad+D'0')
02AC  0084  	MOVWF FSR
02AD  1683  	BSF STATUS, RP0
02AE  0835  	MOVF FCD_One_Wi_0006C_1_counter, W
02AF  0784  	ADDWF FSR, F
02B0  0834  	MOVF FCD_One_Wi_0006C_1_temp, W
02B1  0080  	MOVWF INDF

			counter++;
02B2  0AB5  	INCF FCD_One_Wi_0006C_1_counter, F

		}
		#if OO_CRC_EN == 1
			return ONEWIRE_2_oo_crc;				//Verify the CRC
		#endif
		return 0;
02B4  01B6  	CLRF CompTempVarRet2283


}
029B  0008  	RETURN
02B5  0008  	RETURN


MX_UINT16 FCD_One_Wire0_DS1820_get_temp()

{
	
		MX_UINT16 retval;
		retval = ONEWIRE_2_oo_scratchpad[1];
027B  1283  	BCF STATUS, RP0
027C  1303  	BCF STATUS, RP1
027D  0861  	MOVF gbl_ONEWIRE_2_oo_scratchpad+D'1', W
027E  1683  	BSF STATUS, RP0
027F  00B4  	MOVWF FCD_One_Wi_0006D_1_retval
0280  01B5  	CLRF FCD_One_Wi_0006D_1_retval+D'1'

		retval = retval << 8;
0281  01B6  	CLRF CompTempVar2287
0282  0834  	MOVF FCD_One_Wi_0006D_1_retval, W
0283  00B7  	MOVWF CompTempVar2288
0284  0836  	MOVF CompTempVar2287, W
0285  00B4  	MOVWF FCD_One_Wi_0006D_1_retval
0286  0837  	MOVF CompTempVar2288, W
0287  00B5  	MOVWF FCD_One_Wi_0006D_1_retval+D'1'

		retval = retval | ONEWIRE_2_oo_scratchpad[0];
0288  1283  	BCF STATUS, RP0
0289  0860  	MOVF gbl_ONEWIRE_2_oo_scratchpad, W
028A  1683  	BSF STATUS, RP0
028B  04B4  	IORWF FCD_One_Wi_0006D_1_retval, F
028C  08B5  	MOVF FCD_One_Wi_0006D_1_retval+D'1', F

		return retval;
028D  0834  	MOVF FCD_One_Wi_0006D_1_retval, W
028E  00B6  	MOVWF CompTempVarRet2285
028F  0835  	MOVF FCD_One_Wi_0006D_1_retval+D'1', W
0290  00B7  	MOVWF CompTempVarRet2285+D'1'


}
0291  0008  	RETURN




//EEPROM(0): //Macro implementations


MX_UINT16 FCD_EEPROM0_EEPROMRead(MX_UINT16 addr)

{
	
		return (FC_CAL_EE_Read (addr));
0425  0834  	MOVF FCD_EEPROM_00071_arg_addr, W
0426  00B6  	MOVWF FC_CAL_EE__0006E_arg_Address
0427  0835  	MOVF FCD_EEPROM_00071_arg_addr+D'1', W
0428  00B7  	MOVWF FC_CAL_EE__0006E_arg_Address+D'1'
0429  2133  	CALL FC_CAL_EE__0006E
042A  0839  	MOVF CompTempVarRet2293, W
042B  00B6  	MOVWF CompTempVarRet2294
042C  01B7  	CLRF CompTempVarRet2294+D'1'


}
042D  0008  	RETURN


void FCD_EEPROM0_WriteEEPROM(MX_UINT16 addr, MX_UINT16 data)

{
	
		FC_CAL_EE_Write (addr, data);
041D  0834  	MOVF FCD_EEPROM_00072_arg_addr, W
041E  00B8  	MOVWF FC_CAL_EE__0006F_arg_Address
041F  0835  	MOVF FCD_EEPROM_00072_arg_addr+D'1', W
0420  00B9  	MOVWF FC_CAL_EE__0006F_arg_Address+D'1'
0421  0836  	MOVF FCD_EEPROM_00072_arg_data, W
0422  00BA  	MOVWF FC_CAL_EE__0006F_arg_Data
0423  210D  	CALL FC_CAL_EE__0006F


}
0424  0008  	RETURN


#include "C:\Program Files (x86)\Flowcode\v5\CAL\includes.c"

//Macro implementations


void FCM_Pozdravna_poruka()

{

	//Call Component Macro
	//Call Component Macro: Cursor(3, 0)
	FCD_LCDDisplay0_Cursor(3, 0);
01FF  3003  	MOVLW 0x03
0200  1683  	BSF STATUS, RP0
0201  1303  	BCF STATUS, RP1
0202  00B4  	MOVWF FCD_LCDDis_00052_arg_x
0203  01B5  	CLRF FCD_LCDDis_00052_arg_y
0204  21C2  	CALL FCD_LCDDis_00052


	//Call Component Macro
	//Call Component Macro: PrintString("REGULATOR")
	FCD_LCDDisplay0_PrintString("REGULATOR", 9);
0205  3041  	MOVLW 0x41
0206  00BB  	MOVWF CompTempVar2186+D'5'
0207  3045  	MOVLW 0x45
0208  00B7  	MOVWF CompTempVar2186+D'1'
0209  3047  	MOVLW 0x47
020A  00B8  	MOVWF CompTempVar2186+D'2'
020B  304C  	MOVLW 0x4C
020C  00BA  	MOVWF CompTempVar2186+D'4'
020D  304F  	MOVLW 0x4F
020E  00BD  	MOVWF CompTempVar2186+D'7'
020F  3052  	MOVLW 0x52
0210  00B6  	MOVWF CompTempVar2186
0211  00BE  	MOVWF CompTempVar2186+D'8'
0212  3054  	MOVLW 0x54
0213  00BC  	MOVWF CompTempVar2186+D'6'
0214  3055  	MOVLW 0x55
0215  00B9  	MOVWF CompTempVar2186+D'3'
0216  01BF  	CLRF CompTempVar2186+D'9'
0217  3000  	MOVLW HIGH(CompTempVar2186+D'0')
0218  00B5  	MOVWF FCD_LCDDis_00053_arg_String+D'1'
0219  30B6  	MOVLW LOW(CompTempVar2186+D'0')
021A  00B4  	MOVWF FCD_LCDDis_00053_arg_String
021B  3009  	MOVLW 0x09
021C  00C2  	MOVWF FCD_LCDDis_00053_arg_MSZ_String
021D  21A6  	CALL FCD_LCDDis_00053


	//Call Component Macro
	//Call Component Macro: Cursor(2, 1)
	FCD_LCDDisplay0_Cursor(2, 1);
021E  3002  	MOVLW 0x02
021F  00B4  	MOVWF FCD_LCDDis_00052_arg_x
0220  3001  	MOVLW 0x01
0221  00B5  	MOVWF FCD_LCDDis_00052_arg_y
0222  21C2  	CALL FCD_LCDDis_00052


	//Call Component Macro
	//Call Component Macro: PrintString("TEMPERATURE")
	FCD_LCDDisplay0_PrintString("TEMPERATURE", 11);
0223  3041  	MOVLW 0x41
0224  00BC  	MOVWF CompTempVar2188+D'6'
0225  3045  	MOVLW 0x45
0226  00B7  	MOVWF CompTempVar2188+D'1'
0227  00BA  	MOVWF CompTempVar2188+D'4'
0228  00C0  	MOVWF CompTempVar2188+D'10'
0229  304D  	MOVLW 0x4D
022A  00B8  	MOVWF CompTempVar2188+D'2'
022B  3050  	MOVLW 0x50
022C  00B9  	MOVWF CompTempVar2188+D'3'
022D  3052  	MOVLW 0x52
022E  00BB  	MOVWF CompTempVar2188+D'5'
022F  00BF  	MOVWF CompTempVar2188+D'9'
0230  3054  	MOVLW 0x54
0231  00B6  	MOVWF CompTempVar2188
0232  00BD  	MOVWF CompTempVar2188+D'7'
0233  3055  	MOVLW 0x55
0234  00BE  	MOVWF CompTempVar2188+D'8'
0235  01C1  	CLRF CompTempVar2188+D'11'
0236  3000  	MOVLW HIGH(CompTempVar2188+D'0')
0237  00B5  	MOVWF FCD_LCDDis_00053_arg_String+D'1'
0238  30B6  	MOVLW LOW(CompTempVar2188+D'0')
0239  00B4  	MOVWF FCD_LCDDis_00053_arg_String
023A  300B  	MOVLW 0x0B
023B  00C2  	MOVWF FCD_LCDDis_00053_arg_MSZ_String
023C  21A6  	CALL FCD_LCDDis_00053


	//Delay
	//Delay: 2 s
	delay_s(2);
023D  3002  	MOVLW 0x02
023E  00B4  	MOVWF delay_s_00000_arg_del
023F  2040  	CALL delay_s_00000


	//Call Component Macro
	//Call Component Macro: Clear()
	FCD_LCDDisplay0_Clear();
0240  2195  	CALL FCD_LCDDis_00054


	//Call Component Macro
	//Call Component Macro: Cursor(0, 0)
	FCD_LCDDisplay0_Cursor(0, 0);
0241  01B4  	CLRF FCD_LCDDis_00052_arg_x
0242  01B5  	CLRF FCD_LCDDis_00052_arg_y
0243  21C2  	CALL FCD_LCDDis_00052


	//Call Component Macro
	//Call Component Macro: PrintString("SA SONDOM")
	FCD_LCDDisplay0_PrintString("SA SONDOM", 9);
0244  3020  	MOVLW 0x20
0245  00B8  	MOVWF CompTempVar2190+D'2'
0246  3041  	MOVLW 0x41
0247  00B7  	MOVWF CompTempVar2190+D'1'
0248  3044  	MOVLW 0x44
0249  00BC  	MOVWF CompTempVar2190+D'6'
024A  304D  	MOVLW 0x4D
024B  00BE  	MOVWF CompTempVar2190+D'8'
024C  304E  	MOVLW 0x4E
024D  00BB  	MOVWF CompTempVar2190+D'5'
024E  304F  	MOVLW 0x4F
024F  00BA  	MOVWF CompTempVar2190+D'4'
0250  00BD  	MOVWF CompTempVar2190+D'7'
0251  3053  	MOVLW 0x53
0252  00B6  	MOVWF CompTempVar2190
0253  00B9  	MOVWF CompTempVar2190+D'3'
0254  01BF  	CLRF CompTempVar2190+D'9'
0255  3000  	MOVLW HIGH(CompTempVar2190+D'0')
0256  00B5  	MOVWF FCD_LCDDis_00053_arg_String+D'1'
0257  30B6  	MOVLW LOW(CompTempVar2190+D'0')
0258  00B4  	MOVWF FCD_LCDDis_00053_arg_String
0259  3009  	MOVLW 0x09
025A  00C2  	MOVWF FCD_LCDDis_00053_arg_MSZ_String
025B  21A6  	CALL FCD_LCDDis_00053


	//Call Component Macro
	//Call Component Macro: Cursor(0, 1)
	FCD_LCDDisplay0_Cursor(0, 1);
025C  01B4  	CLRF FCD_LCDDis_00052_arg_x
025D  3001  	MOVLW 0x01
025E  00B5  	MOVWF FCD_LCDDis_00052_arg_y
025F  21C2  	CALL FCD_LCDDis_00052


	//Call Component Macro
	//Call Component Macro: PrintString("DS18B20")
	FCD_LCDDisplay0_PrintString("DS18B20", 7);
0260  3044  	MOVLW 0x44
0261  00B6  	MOVWF CompTempVar2192
0262  3053  	MOVLW 0x53
0263  00B7  	MOVWF CompTempVar2192+D'1'
0264  3031  	MOVLW 0x31
0265  00B8  	MOVWF CompTempVar2192+D'2'
0266  3038  	MOVLW 0x38
0267  00B9  	MOVWF CompTempVar2192+D'3'
0268  3042  	MOVLW 0x42
0269  00BA  	MOVWF CompTempVar2192+D'4'
026A  3032  	MOVLW 0x32
026B  00BB  	MOVWF CompTempVar2192+D'5'
026C  3030  	MOVLW 0x30
026D  00BC  	MOVWF CompTempVar2192+D'6'
026E  01BD  	CLRF CompTempVar2192+D'7'
026F  3000  	MOVLW HIGH(CompTempVar2192+D'0')
0270  00B5  	MOVWF FCD_LCDDis_00053_arg_String+D'1'
0271  30B6  	MOVLW LOW(CompTempVar2192+D'0')
0272  00B4  	MOVWF FCD_LCDDis_00053_arg_String
0273  3007  	MOVLW 0x07
0274  00C2  	MOVWF FCD_LCDDis_00053_arg_MSZ_String
0275  21A6  	CALL FCD_LCDDis_00053


	//Delay
	//Delay: 2 s
	delay_s(2);
0276  3002  	MOVLW 0x02
0277  00B4  	MOVWF delay_s_00000_arg_del
0278  2040  	CALL delay_s_00000


	//Call Component Macro
	//Call Component Macro: Clear()
	FCD_LCDDisplay0_Clear();
0279  2195  	CALL FCD_LCDDis_00054


}
027A  0008  	RETURN




void main()

{
	//Initialization
	adcon1 = 0x07;
042E  3007  	MOVLW 0x07
042F  1683  	BSF STATUS, RP0
0430  1303  	BCF STATUS, RP1
0431  009F  	MOVWF gbl_adcon1



	//Interrupt initialization code
	option_reg = 0xC0;
0432  30C0  	MOVLW 0xC0
0433  0081  	MOVWF gbl_option_reg



	//Call Component Macro
	//Call Component Macro: Start()
	FCD_LCDDisplay0_Start();
0434  23C7  	CALL FCD_LCDDis_00056


	//Calculation
	//Calculation:
	//  setPoint = 20
	//  temp = 0
	//  tempDec = 0
	//  tempInt = 0
	//  pwplus = 1
	//  pwminus = 1
	FCV_SETPOINT = 20;
0435  3014  	MOVLW 0x14
0436  00B0  	MOVWF gbl_FCV_SETPOINT

	FCV_TEMP = 0;
0437  01A3  	CLRF gbl_FCV_TEMP
0438  01A4  	CLRF gbl_FCV_TEMP+D'1'

	FCV_TEMPDEC = 0;
0439  01AF  	CLRF gbl_FCV_TEMPDEC

	FCV_TEMPINT = 0;
043A  01B1  	CLRF gbl_FCV_TEMPINT

	FCV_PWPLUS = 1;
043B  3001  	MOVLW 0x01
043C  00AE  	MOVWF gbl_FCV_PWPLUS

	FCV_PWMINUS = 1;
043D  00B2  	MOVWF gbl_FCV_PWMINUS


	//Call Component Macro
	//Call Component Macro: SetPoint=Read(0)
	FCV_SETPOINT = FCD_EEPROM0_EEPROMRead(0);
043E  01B4  	CLRF FCD_EEPROM_00071_arg_addr
043F  01B5  	CLRF FCD_EEPROM_00071_arg_addr+D'1'
0440  2425  	CALL FCD_EEPROM_00071
0441  0836  	MOVF CompTempVarRet2294, W
0442  00B0  	MOVWF gbl_FCV_SETPOINT


	//Call Macro
	//Call Macro: Pozdravna_poruka()
	FCM_Pozdravna_poruka();
0443  21FF  	CALL FCM_Pozdra_00051


	//Loop
	//Loop: While 1
	while (1)
0444        label63

	{

		//Call Component Macro
		//Call Component Macro: DS1820_start_conversion()
		FCD_One_Wire0_DS1820_start_conversion();
0444  22B6  	CALL FCD_One_Wi_0006B


		//Call Component Macro
		//Call Component Macro: DS1820_read_scratchpad()
		FCD_One_Wire0_DS1820_read_scratchpad();
0445  2292  	CALL FCD_One_Wi_0006C


		//Call Component Macro
		//Call Component Macro: temp=DS1820_get_temp()
		FCV_TEMP = FCD_One_Wire0_DS1820_get_temp();
0446  227B  	CALL FCD_One_Wi_0006D
0447  0836  	MOVF CompTempVarRet2285, W
0448  00A3  	MOVWF gbl_FCV_TEMP
0449  0837  	MOVF CompTempVarRet2285+D'1', W
044A  00A4  	MOVWF gbl_FCV_TEMP+D'1'


		//Calculation
		//Calculation:
		//  tempInt = temp / 16
		//  tempDec = (temp MOD 16) * 625
		FCV_TEMPINT = FCV_TEMP / 16;
044B  0823  	MOVF gbl_FCV_TEMP, W
044C  00B1  	MOVWF gbl_FCV_TEMPINT
044D  0C24  	RRF gbl_FCV_TEMP+D'1', W
044E  00B4  	MOVWF CompTempVar2296
044F  0CB1  	RRF gbl_FCV_TEMPINT, F
0450  0CB4  	RRF CompTempVar2296, F
0451  0CB1  	RRF gbl_FCV_TEMPINT, F
0452  0CB4  	RRF CompTempVar2296, F
0453  0CB1  	RRF gbl_FCV_TEMPINT, F
0454  0CB4  	RRF CompTempVar2296, F
0455  0CB1  	RRF gbl_FCV_TEMPINT, F

		FCV_TEMPDEC = (FCV_TEMP % 16) * 625;
0456  0823  	MOVF gbl_FCV_TEMP, W
0457  00B4  	MOVWF __rem_16_1_00004_arg_a
0458  0824  	MOVF gbl_FCV_TEMP+D'1', W
0459  00B5  	MOVWF __rem_16_1_00004_arg_a+D'1'
045A  1FA4  	BTFSS gbl_FCV_TEMP+D'1',7
045B  2C61  	GOTO	label64
045C  09B4  	COMF __rem_16_1_00004_arg_a, F
045D  09B5  	COMF __rem_16_1_00004_arg_a+D'1', F
045E  0AB4  	INCF __rem_16_1_00004_arg_a, F
045F  1903  	BTFSC STATUS,Z
0460  0AB5  	INCF __rem_16_1_00004_arg_a+D'1', F
0461        label64
0461  3010  	MOVLW 0x10
0462  00B6  	MOVWF __rem_16_1_00004_arg_b
0463  01B7  	CLRF __rem_16_1_00004_arg_b+D'1'
0464  21D3  	CALL __rem_16_1_00004
0465  083E  	MOVF CompTempVarRet216, W
0466  00B8  	MOVWF __mul_8_8__00005_arg_a
0467  083F  	MOVF CompTempVarRet216+D'1', W
0468  00BA  	MOVWF CompTempVar2298
0469  1FA4  	BTFSS gbl_FCV_TEMP+D'1',7
046A  2C70  	GOTO	label65
046B  09B8  	COMF __mul_8_8__00005_arg_a, F
046C  09BA  	COMF CompTempVar2298, F
046D  0AB8  	INCF __mul_8_8__00005_arg_a, F
046E  1903  	BTFSC STATUS,Z
046F  0ABA  	INCF CompTempVar2298, F
0470        label65
0470  3071  	MOVLW 0x71
0471  00B9  	MOVWF __mul_8_8__00005_arg_b
0472  21F2  	CALL __mul_8_8__00005
0473  083C  	MOVF CompTempVarRet451, W
0474  00AF  	MOVWF gbl_FCV_TEMPDEC


		//Call Component Macro
		//Call Component Macro: Cursor(0, 0)
		FCD_LCDDisplay0_Cursor(0, 0);
0475  01B4  	CLRF FCD_LCDDis_00052_arg_x
0476  01B5  	CLRF FCD_LCDDis_00052_arg_y
0477  21C2  	CALL FCD_LCDDis_00052


		//Call Component Macro
		//Call Component Macro: PrintString("TEMP:")
		FCD_LCDDisplay0_PrintString("TEMP:", 5);
0478  3054  	MOVLW 0x54
0479  00B6  	MOVWF CompTempVar2299
047A  3045  	MOVLW 0x45
047B  00B7  	MOVWF CompTempVar2299+D'1'
047C  304D  	MOVLW 0x4D
047D  00B8  	MOVWF CompTempVar2299+D'2'
047E  3050  	MOVLW 0x50
047F  00B9  	MOVWF CompTempVar2299+D'3'
0480  303A  	MOVLW 0x3A
0481  00BA  	MOVWF CompTempVar2299+D'4'
0482  01BB  	CLRF CompTempVar2299+D'5'
0483  3000  	MOVLW HIGH(CompTempVar2299+D'0')
0484  00B5  	MOVWF FCD_LCDDis_00053_arg_String+D'1'
0485  30B6  	MOVLW LOW(CompTempVar2299+D'0')
0486  00B4  	MOVWF FCD_LCDDis_00053_arg_String
0487  3005  	MOVLW 0x05
0488  00C2  	MOVWF FCD_LCDDis_00053_arg_MSZ_String
0489  21A6  	CALL FCD_LCDDis_00053


		//Call Component Macro
		//Call Component Macro: PrintNumber(tempInt)
		FCD_LCDDisplay0_PrintNumber(FCV_TEMPINT);
048A  0831  	MOVF gbl_FCV_TEMPINT, W
048B  00B4  	MOVWF FCD_LCDDis_00059_arg_Number
048C  01B5  	CLRF FCD_LCDDis_00059_arg_Number+D'1'
048D  22D3  	CALL FCD_LCDDis_00059


		//Call Component Macro
		//Call Component Macro: PrintString(".")
		FCD_LCDDisplay0_PrintString(".", 1);
048E  302E  	MOVLW 0x2E
048F  00B6  	MOVWF CompTempVar2301
0490  01B7  	CLRF CompTempVar2301+D'1'
0491  3000  	MOVLW HIGH(CompTempVar2301+D'0')
0492  00B5  	MOVWF FCD_LCDDis_00053_arg_String+D'1'
0493  30B6  	MOVLW LOW(CompTempVar2301+D'0')
0494  00B4  	MOVWF FCD_LCDDis_00053_arg_String
0495  3001  	MOVLW 0x01
0496  00C2  	MOVWF FCD_LCDDis_00053_arg_MSZ_String
0497  21A6  	CALL FCD_LCDDis_00053


		//Call Component Macro
		//Call Component Macro: PrintNumber(tempDec)
		FCD_LCDDisplay0_PrintNumber(FCV_TEMPDEC);
0498  082F  	MOVF gbl_FCV_TEMPDEC, W
0499  00B4  	MOVWF FCD_LCDDis_00059_arg_Number
049A  01B5  	CLRF FCD_LCDDis_00059_arg_Number+D'1'
049B  22D3  	CALL FCD_LCDDis_00059


		//Call Component Macro
		//Call Component Macro: PrintASCII(176)
		FCD_LCDDisplay0_PrintASCII(176);
049C  30B0  	MOVLW 0xB0
049D  00B4  	MOVWF FCD_LCDDis_00057_arg_Character
049E  23C1  	CALL FCD_LCDDis_00057


		//Call Component Macro
		//Call Component Macro: PrintString("C")
		FCD_LCDDisplay0_PrintString("C", 1);
049F  3043  	MOVLW 0x43
04A0  00B6  	MOVWF CompTempVar2303
04A1  01B7  	CLRF CompTempVar2303+D'1'
04A2  3000  	MOVLW HIGH(CompTempVar2303+D'0')
04A3  00B5  	MOVWF FCD_LCDDis_00053_arg_String+D'1'
04A4  30B6  	MOVLW LOW(CompTempVar2303+D'0')
04A5  00B4  	MOVWF FCD_LCDDis_00053_arg_String
04A6  3001  	MOVLW 0x01
04A7  00C2  	MOVWF FCD_LCDDis_00053_arg_MSZ_String
04A8  21A6  	CALL FCD_LCDDis_00053


		//Call Component Macro
		//Call Component Macro: Cursor(0, 1)
		FCD_LCDDisplay0_Cursor(0, 1);
04A9  01B4  	CLRF FCD_LCDDis_00052_arg_x
04AA  3001  	MOVLW 0x01
04AB  00B5  	MOVWF FCD_LCDDis_00052_arg_y
04AC  21C2  	CALL FCD_LCDDis_00052


		//Call Component Macro
		//Call Component Macro: PrintString("PW:")
		FCD_LCDDisplay0_PrintString("PW:", 3);
04AD  3050  	MOVLW 0x50
04AE  00B6  	MOVWF CompTempVar2305
04AF  3057  	MOVLW 0x57
04B0  00B7  	MOVWF CompTempVar2305+D'1'
04B1  303A  	MOVLW 0x3A
04B2  00B8  	MOVWF CompTempVar2305+D'2'
04B3  01B9  	CLRF CompTempVar2305+D'3'
04B4  3000  	MOVLW HIGH(CompTempVar2305+D'0')
04B5  00B5  	MOVWF FCD_LCDDis_00053_arg_String+D'1'
04B6  30B6  	MOVLW LOW(CompTempVar2305+D'0')
04B7  00B4  	MOVWF FCD_LCDDis_00053_arg_String
04B8  3003  	MOVLW 0x03
04B9  00C2  	MOVWF FCD_LCDDis_00053_arg_MSZ_String
04BA  21A6  	CALL FCD_LCDDis_00053


		//Call Component Macro
		//Call Component Macro: PrintNumber(SetPoint)
		FCD_LCDDisplay0_PrintNumber(FCV_SETPOINT);
04BB  0830  	MOVF gbl_FCV_SETPOINT, W
04BC  00B4  	MOVWF FCD_LCDDis_00059_arg_Number
04BD  01B5  	CLRF FCD_LCDDis_00059_arg_Number+D'1'
04BE  22D3  	CALL FCD_LCDDis_00059


		//Decision
		//Decision: tempInt >= setPoint?
		if (FCV_TEMPINT >= FCV_SETPOINT)
04BF  0830  	MOVF gbl_FCV_SETPOINT, W
04C0  0231  	SUBWF gbl_FCV_TEMPINT, W
04C1  1C03  	BTFSS STATUS,C
04C2  2CCB  	GOTO	label66
04CB        label66

		{

			//Output
			//Output: 0 -> C0
			trisc = trisc & 0xFE;
04C3  30FE  	MOVLW 0xFE
04C4  0507  	ANDWF gbl_trisc, W
04C5  0087  	MOVWF gbl_trisc

			if ((0))
				portc = (portc & 0xFE) | 0x01;
			else
				portc = portc & 0xFE;
04C6  30FE  	MOVLW 0xFE
04C7  1283  	BCF STATUS, RP0
04C8  0507  	ANDWF gbl_portc, W
04C9  0087  	MOVWF gbl_portc


		} else {
04CA  2CD7  	GOTO	label67
04D7        label67
055F  2D4C  	GOTO	label70


			//Output
			//Output: 1 -> C0
			trisc = trisc & 0xFE;
04CB  30FE  	MOVLW 0xFE
04CC  0507  	ANDWF gbl_trisc, W
04CD  0087  	MOVWF gbl_trisc

			if ((1))
				portc = (portc & 0xFE) | 0x01;
04CE  30FE  	MOVLW 0xFE
04CF  1283  	BCF STATUS, RP0
04D0  0507  	ANDWF gbl_portc, W
04D1  1683  	BSF STATUS, RP0
04D2  00B4  	MOVWF CompTempVar2307
04D3  3001  	MOVLW 0x01
04D4  0434  	IORWF CompTempVar2307, W
04D5  1283  	BCF STATUS, RP0
04D6  0087  	MOVWF gbl_portc

			else
				portc = portc & 0xFE;

		}

		//Delay
		//Delay: 500 ms
		delay_ms(255);
04D7  30FF  	MOVLW 0xFF
04D8  1683  	BSF STATUS, RP0
04D9  00B8  	MOVWF delay_ms_00000_arg_del
04DA  201A  	CALL delay_ms_00000

		delay_ms(245);
04DB  30F5  	MOVLW 0xF5
04DC  00B8  	MOVWF delay_ms_00000_arg_del
04DD  201A  	CALL delay_ms_00000


		//Input
		//Input: D0 -> pwplus
		trisd = trisd | 0x01;
04DE  3001  	MOVLW 0x01
04DF  0408  	IORWF gbl_trisd, W
04E0  0088  	MOVWF gbl_trisd

		FCV_PWPLUS = ((portd & 0x01) == 0x01);
04E1  3001  	MOVLW 0x01
04E2  1283  	BCF STATUS, RP0
04E3  0508  	ANDWF gbl_portd, W
04E4  1683  	BSF STATUS, RP0
04E5  00B4  	MOVWF CompTempVar2308
04E6  01AE  	CLRF gbl_FCV_PWPLUS
04E7  0334  	DECF CompTempVar2308, W
04E8  1903  	BTFSC STATUS,Z
04E9  0AAE  	INCF gbl_FCV_PWPLUS, F


		//Decision
		//Decision: pwplus = 0?
		if (FCV_PWPLUS == 0)
04EA  08AE  	MOVF gbl_FCV_PWPLUS, F
04EB  1D03  	BTFSS STATUS,Z
04EC  2D1E  	GOTO	label69

		{

			//Calculation
			//Calculation:
			//  setPoint = setPoint + 1
			FCV_SETPOINT = FCV_SETPOINT + 1;
04ED  0A30  	INCF gbl_FCV_SETPOINT, W
04EE  00B0  	MOVWF gbl_FCV_SETPOINT


			//Call Component Macro
			//Call Component Macro: Cursor(0, 1)
			FCD_LCDDisplay0_Cursor(0, 1);
04EF  01B4  	CLRF FCD_LCDDis_00052_arg_x
04F0  3001  	MOVLW 0x01
04F1  00B5  	MOVWF FCD_LCDDis_00052_arg_y
04F2  21C2  	CALL FCD_LCDDis_00052


			//Call Component Macro
			//Call Component Macro: PrintString("PW:")
			FCD_LCDDisplay0_PrintString("PW:", 3);
04F3  3050  	MOVLW 0x50
04F4  00B6  	MOVWF CompTempVar2310
04F5  3057  	MOVLW 0x57
04F6  00B7  	MOVWF CompTempVar2310+D'1'
04F7  303A  	MOVLW 0x3A
04F8  00B8  	MOVWF CompTempVar2310+D'2'
04F9  01B9  	CLRF CompTempVar2310+D'3'
04FA  3000  	MOVLW HIGH(CompTempVar2310+D'0')
04FB  00B5  	MOVWF FCD_LCDDis_00053_arg_String+D'1'
04FC  30B6  	MOVLW LOW(CompTempVar2310+D'0')
04FD  00B4  	MOVWF FCD_LCDDis_00053_arg_String
04FE  3003  	MOVLW 0x03
04FF  00C2  	MOVWF FCD_LCDDis_00053_arg_MSZ_String
0500  21A6  	CALL FCD_LCDDis_00053


			//Call Component Macro
			//Call Component Macro: PrintNumber(SetPoint)
			FCD_LCDDisplay0_PrintNumber(FCV_SETPOINT);
0501  0830  	MOVF gbl_FCV_SETPOINT, W
0502  00B4  	MOVWF FCD_LCDDis_00059_arg_Number
0503  01B5  	CLRF FCD_LCDDis_00059_arg_Number+D'1'
0504  22D3  	CALL FCD_LCDDis_00059


			//Call Component Macro
			//Call Component Macro: Write(0, SetPoint)
			FCD_EEPROM0_WriteEEPROM(0, FCV_SETPOINT);
0505  01B4  	CLRF FCD_EEPROM_00072_arg_addr
0506  01B5  	CLRF FCD_EEPROM_00072_arg_addr+D'1'
0507  0830  	MOVF gbl_FCV_SETPOINT, W
0508  00B6  	MOVWF FCD_EEPROM_00072_arg_data
0509  01B7  	CLRF FCD_EEPROM_00072_arg_data+D'1'
050A  241D  	CALL FCD_EEPROM_00072


			//Loop
			//Loop: While pwplus = 0
			while (FCV_PWPLUS == 0)
050B        label68
050B  1303  	BCF STATUS, RP1
050C  08AE  	MOVF gbl_FCV_PWPLUS, F
050D  1D03  	BTFSS STATUS,Z
050E  2D1E  	GOTO	label69
051D  2D0B  	GOTO	label68
051E        label69

			{

				//Input
				//Input: D0 -> pwplus
				trisd = trisd | 0x01;
050F  3001  	MOVLW 0x01
0510  0408  	IORWF gbl_trisd, W
0511  0088  	MOVWF gbl_trisd

				FCV_PWPLUS = ((portd & 0x01) == 0x01);
0512  3001  	MOVLW 0x01
0513  1283  	BCF STATUS, RP0
0514  0508  	ANDWF gbl_portd, W
0515  1683  	BSF STATUS, RP0
0516  00B4  	MOVWF CompTempVar2312
0517  01B5  	CLRF CompTempVar2313
0518  0334  	DECF CompTempVar2312, W
0519  1903  	BTFSC STATUS,Z
051A  0AB5  	INCF CompTempVar2313, F
051B  0835  	MOVF CompTempVar2313, W
051C  00AE  	MOVWF gbl_FCV_PWPLUS



			}

		// } else {

		}

		//Input
		//Input: D1 -> pwminus
		trisd = trisd | 0x02;
051E  3002  	MOVLW 0x02
051F  0408  	IORWF gbl_trisd, W
0520  0088  	MOVWF gbl_trisd

		FCV_PWMINUS = ((portd & 0x02) == 0x02);
0521  3002  	MOVLW 0x02
0522  1283  	BCF STATUS, RP0
0523  0508  	ANDWF gbl_portd, W
0524  1683  	BSF STATUS, RP0
0525  00B4  	MOVWF CompTempVar2314
0526  01B2  	CLRF gbl_FCV_PWMINUS
0527  3002  	MOVLW 0x02
0528  0234  	SUBWF CompTempVar2314, W
0529  1903  	BTFSC STATUS,Z
052A  0AB2  	INCF gbl_FCV_PWMINUS, F


		//Decision
		//Decision: pwminus = 0?
		if (FCV_PWMINUS == 0)
052B  08B2  	MOVF gbl_FCV_PWMINUS, F
052C  1D03  	BTFSS STATUS,Z
052D  2C44  	GOTO	label63

		{

			//Calculation
			//Calculation:
			//  setPoint = setPoint - 1
			FCV_SETPOINT = FCV_SETPOINT - 1;
052E  0330  	DECF gbl_FCV_SETPOINT, W
052F  00B0  	MOVWF gbl_FCV_SETPOINT


			//Call Component Macro
			//Call Component Macro: Cursor(0, 1)
			FCD_LCDDisplay0_Cursor(0, 1);
0530  01B4  	CLRF FCD_LCDDis_00052_arg_x
0531  3001  	MOVLW 0x01
0532  00B5  	MOVWF FCD_LCDDis_00052_arg_y
0533  21C2  	CALL FCD_LCDDis_00052


			//Call Component Macro
			//Call Component Macro: PrintString("PW:")
			FCD_LCDDisplay0_PrintString("PW:", 3);
0534  3050  	MOVLW 0x50
0535  00B6  	MOVWF CompTempVar2316
0536  3057  	MOVLW 0x57
0537  00B7  	MOVWF CompTempVar2316+D'1'
0538  303A  	MOVLW 0x3A
0539  00B8  	MOVWF CompTempVar2316+D'2'
053A  01B9  	CLRF CompTempVar2316+D'3'
053B  3000  	MOVLW HIGH(CompTempVar2316+D'0')
053C  00B5  	MOVWF FCD_LCDDis_00053_arg_String+D'1'
053D  30B6  	MOVLW LOW(CompTempVar2316+D'0')
053E  00B4  	MOVWF FCD_LCDDis_00053_arg_String
053F  3003  	MOVLW 0x03
0540  00C2  	MOVWF FCD_LCDDis_00053_arg_MSZ_String
0541  21A6  	CALL FCD_LCDDis_00053


			//Call Component Macro
			//Call Component Macro: PrintNumber(SetPoint)
			FCD_LCDDisplay0_PrintNumber(FCV_SETPOINT);
0542  0830  	MOVF gbl_FCV_SETPOINT, W
0543  00B4  	MOVWF FCD_LCDDis_00059_arg_Number
0544  01B5  	CLRF FCD_LCDDis_00059_arg_Number+D'1'
0545  22D3  	CALL FCD_LCDDis_00059


			//Call Component Macro
			//Call Component Macro: Write(0, SetPoint)
			FCD_EEPROM0_WriteEEPROM(0, FCV_SETPOINT);
0546  01B4  	CLRF FCD_EEPROM_00072_arg_addr
0547  01B5  	CLRF FCD_EEPROM_00072_arg_addr+D'1'
0548  0830  	MOVF gbl_FCV_SETPOINT, W
0549  00B6  	MOVWF FCD_EEPROM_00072_arg_data
054A  01B7  	CLRF FCD_EEPROM_00072_arg_data+D'1'
054B  241D  	CALL FCD_EEPROM_00072


			//Loop
			//Loop: While pwminus = 0
			while (FCV_PWMINUS == 0)
054C        label70
054C  1303  	BCF STATUS, RP1
054D  08B2  	MOVF gbl_FCV_PWMINUS, F
054E  1D03  	BTFSS STATUS,Z
054F  2C44  	GOTO	label63

			{

				//Input
				//Input: D1 -> pwminus
				trisd = trisd | 0x02;
0550  3002  	MOVLW 0x02
0551  0408  	IORWF gbl_trisd, W
0552  0088  	MOVWF gbl_trisd

				FCV_PWMINUS = ((portd & 0x02) == 0x02);
0553  3002  	MOVLW 0x02
0554  1283  	BCF STATUS, RP0
0555  0508  	ANDWF gbl_portd, W
0556  1683  	BSF STATUS, RP0
0557  00B4  	MOVWF CompTempVar2318
0558  01B5  	CLRF CompTempVar2319
0559  3002  	MOVLW 0x02
055A  0234  	SUBWF CompTempVar2318, W
055B  1903  	BTFSC STATUS,Z
055C  0AB5  	INCF CompTempVar2319, F
055D  0835  	MOVF CompTempVar2319, W
055E  00B2  	MOVWF gbl_FCV_PWMINUS



			}

		// } else {

		}


	}

	mainendloop: goto mainendloop;
}


void MX_INTERRUPT_MACRO(void)

{
}
0594  1683  	BSF STATUS, RP0
0595  1303  	BCF STATUS, RP1
0596  0E22  	SWAPF Int1BContext+D'2', W
0597  0084  	MOVWF FSR
0598  0E21  	SWAPF Int1BContext+D'1', W
0599  008A  	MOVWF PCLATH
059A  0E20  	SWAPF Int1BContext, W
059B  0083  	MOVWF STATUS
059C  0EFF  	SWAPF Int1Context, F
059D  0E7F  	SWAPF Int1Context, W
059E  0009  	RETFIE





/*********************************************************************
 *                  Flowcode CAL EEPROM File
 *
 * File: PIC_CAL_EEPROM.c
 *
 * (c) 2011 Matrix Multimedia Ltd.
 * http://www.matrixmultimedia.com
 *
 * Software License Agreement
 *
 * The software supplied herewith by Matrix Multimedia Ltd (the
 * “Company”) for its Flowcode graphical programming language is
 * intended and supplied to you, the Company’s customer, for use
 * solely and exclusively on the Company's products. The software
 * is owned by the Company, and is protected under applicable
 * copyright laws. All rights are reserved. Any use in violation
 * of the foregoing restrictions may subject the user to criminal
 * sanctions under applicable laws, as well as to civil liability
 * for the breach of the terms and conditions of this licence.
 *
 * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,
 * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED
 * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,
 * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR
 * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
 * Changelog:
 *
 *  date  | by | description
 * -------+----+-----------------------------------------------------
 * 210911 | BR | Created
 */



//EEPROM Function Prototypes
MX_UINT8 FC_CAL_EE_Read (MX_UINT16 Address);
void FC_CAL_EE_Write (MX_UINT16 Address, MX_UINT8 Data);



MX_UINT8 FC_CAL_EE_Read (MX_UINT16 Address)

{
	char data = 0;
0133  01B8  	CLRF FC_CAL_EE__0006E_1_data

	#ifdef MX_EE
		#ifdef _BOOSTC

			#ifdef EEADR
			  #ifndef MX_EEADR
				#define MX_EEADR eeadr
			  #endif
			#endif
			#ifdef EEADRL
			  #ifndef MX_EEADR
				#define MX_EEADR eeadrl
			  #endif
			#endif

			#ifdef EEDATA
			  #ifndef MX_EEDATA
				#define MX_EEDATA eedata
			  #endif
			#endif
			#ifdef EEDATAL
			  #ifndef MX_EEDATA
				#define MX_EEDATA eedatal
			  #endif
			#endif
			#ifdef EEDATL
			  #ifndef MX_EEDATA
				#define MX_EEDATA eedatl
			  #endif
			#endif

			#ifndef MX_EEADR	//Catch Error
				#error "EEPROM error - MX_EEADR not set"
			#endif
			#ifndef MX_EEDATA
				#error "EEPROM error - MX_EEDATA not set"
			#endif

			MX_EEADR = Address & 0xff;
0134  0836  	MOVF FC_CAL_EE__0006E_arg_Address, W
0135  1283  	BCF STATUS, RP0
0136  1703  	BSF STATUS, RP1
0137  008D  	MOVWF gbl_eeadr

			#if (MX_EE_SIZE > 256)
				eeadrh = (Address & 0xff00) >> 8;
			#endif
			#ifdef MX_EE_TYPE2
				clear_bit(eecon1, EEPGD);
0138  1683  	BSF STATUS, RP0
0139  138C  	BCF gbl_eecon1,7

			#endif
			#ifdef MX_EE_TYPE3
				clear_bit(eecon1, EEPGD);
				clear_bit(eecon1, CFGS);
			#endif
			set_bit(eecon1, RD);
013A  140C  	BSF gbl_eecon1,0

			data = MX_EEDATA;
013B  1283  	BCF STATUS, RP0
013C  080C  	MOVF gbl_eedata, W
013D  1683  	BSF STATUS, RP0
013E  1303  	BCF STATUS, RP1
013F  00B8  	MOVWF FC_CAL_EE__0006E_1_data

		#endif
		#ifdef HI_TECH_C
			data = eeprom_read(Address);
		#endif
	#else
		#error "Chip does not have EEPROM memory"
	#endif
	return (data);
0140  0838  	MOVF FC_CAL_EE__0006E_1_data, W
0141  00B9  	MOVWF CompTempVarRet2293

}
0142  0008  	RETURN


void FC_CAL_EE_Write (MX_UINT16 Address, MX_UINT8 Data)

{
	#ifdef MX_EE
		#ifdef _BOOSTC

			#ifdef EEADR
			  #ifndef MX_EEADR
				#define MX_EEADR eeadr
			  #endif
			#endif
			#ifdef EEADRL
			  #ifndef MX_EEADR
				#define MX_EEADR eeadrl
			  #endif
			#endif

			#ifdef EEDATA
			  #ifndef MX_EEDATA
				#define MX_EEDATA eedata
			  #endif
			#endif
			#ifdef EEDATAL
			  #ifndef MX_EEDATA
				#define MX_EEDATA eedatal
			  #endif
			#endif
			#ifdef EEDATL
			  #ifndef MX_EEDATA
				#define MX_EEDATA eedatl
			  #endif
			#endif

			#ifndef MX_EEADR	//Catch Error
				#error "EEPROM error - MX_EEADR not set"
			#endif
			#ifndef MX_EEDATA
				#error "EEPROM error - MX_EEDATA not set"
			#endif

			char bInterruptsEnabled;
			//wait for previous EE writes to complete...
			while (test_bit(eecon1, WR));
010D        label21
010D  1703  	BSF STATUS, RP1
010E  188C  	BTFSC gbl_eecon1,1
010F  290D  	GOTO	label21

			MX_EEADR = Address & 0xff;
0110  1303  	BCF STATUS, RP1
0111  0838  	MOVF FC_CAL_EE__0006F_arg_Address, W
0112  1283  	BCF STATUS, RP0
0113  1703  	BSF STATUS, RP1
0114  008D  	MOVWF gbl_eeadr

			#if (MX_EE_SIZE > 256)
				eeadrh = (Address & 0xff00) >> 8;
			#endif
			MX_EEDATA = Data;
0115  1683  	BSF STATUS, RP0
0116  1303  	BCF STATUS, RP1
0117  083A  	MOVF FC_CAL_EE__0006F_arg_Data, W
0118  1283  	BCF STATUS, RP0
0119  1703  	BSF STATUS, RP1
011A  008C  	MOVWF gbl_eedata

			#ifdef MX_EE_TYPE2
				clear_bit(eecon1, EEPGD);
011B  1683  	BSF STATUS, RP0
011C  138C  	BCF gbl_eecon1,7

			#endif
			#ifdef MX_EE_TYPE3
				clear_bit(eecon1, EEPGD);
				clear_bit(eecon1, CFGS);
			#endif
			set_bit(eecon1, WREN);
011D  150C  	BSF gbl_eecon1,2

			bInterruptsEnabled = test_bit(intcon, GIE);
011E  3080  	MOVLW 0x80
011F  050B  	ANDWF gbl_intcon, W
0120  1303  	BCF STATUS, RP1
0121  00BB  	MOVWF FC_CAL_EE__0006F_1_bInterr_00070

			clear_bit(intcon, GIE);			//Disable Interrupts
0122  138B  	BCF gbl_intcon,7

			eecon2 = 0x55;
0123  3055  	MOVLW 0x55
0124  1703  	BSF STATUS, RP1
0125  008D  	MOVWF gbl_eecon2

			eecon2 = 0xAA;
0126  30AA  	MOVLW 0xAA
0127  008D  	MOVWF gbl_eecon2

			set_bit(eecon1, WR);
0128  148C  	BSF gbl_eecon1,1

			while (test_bit(eecon1, WR));	//wait for EE write to complete...
0129        label22
0129  188C  	BTFSC gbl_eecon1,1
012A  2929  	GOTO	label22

			if (bInterruptsEnabled)
012B  1303  	BCF STATUS, RP1
012C  08BB  	MOVF FC_CAL_EE__0006F_1_bInterr_00070, F
012D  1903  	BTFSC STATUS,Z
012E  2930  	GOTO	label23
0130        label23

				set_bit(intcon, GIE);		//Re-enable Interrupts
012F  178B  	BSF gbl_intcon,7

			clear_bit(eecon1, WREN);
0130  1703  	BSF STATUS, RP1
0131  110C  	BCF gbl_eecon1,2

		#endif
		#ifdef HI_TECH_C
			eeprom_write(Address, Data);
		#endif
	#else
		#error "Chip does not have EEPROM memory"
	#endif
}
0132  0008  	RETURN



////////////////////////////////////////
// Code with no source :-)
////////////////////////////////////////
0000  2D60  	GOTO	_startup

0004  00FF  	MOVWF Int1Context
0005  0E03  	SWAPF STATUS, W
0006  1683  	BSF STATUS, RP0
0007  1303  	BCF STATUS, RP1
0008  00A0  	MOVWF Int1BContext
0009  0E0A  	SWAPF PCLATH, W
000A  00A1  	MOVWF Int1BContext+D'1'
000B  0E04  	SWAPF FSR, W
000C  00A2  	MOVWF Int1BContext+D'2'
000D  118A  	BCF PCLATH,3
000E  120A  	BCF PCLATH,4
000F  2D94  	GOTO	interrupt
0010        delay_us_00000
0010        ; { delay_us ; function begin
0010  3001  	MOVLW 0x01
0011  07BB  	ADDWF delay_us_00000_arg_del, F
0012  0CBB  	RRF delay_us_00000_arg_del, F
0013  30FF  	MOVLW 0xFF
0014  05BB  	ANDWF delay_us_00000_arg_del, F
0015        label1
0015  0000  	NOP
0016  0000  	NOP
0017  0BBB  	DECFSZ delay_us_00000_arg_del, F
0018  2815  	GOTO	label1
0019  0008  	RETURN
001A        ; } delay_us function end

001A        delay_ms_00000
001A        ; { delay_ms ; function begin
001A  08B8  	MOVF delay_ms_00000_arg_del, F
001B  1D03  	BTFSS STATUS,Z
001C  281E  	GOTO	label2
001D  0008  	RETURN
001E        label2
001E  30F9  	MOVLW 0xF9
001F        label3
001F  0000  	NOP
0020  0000  	NOP
0021  0000  	NOP
0022  0000  	NOP
0023  0000  	NOP
0024  0000  	NOP
0025  3EFF  	ADDLW 0xFF
0026  1D03  	BTFSS STATUS,Z
0027  281F  	GOTO	label3
0028  0000  	NOP
0029  0000  	NOP
002A  0000  	NOP
002B  0000  	NOP
002C  0000  	NOP
002D  0000  	NOP
002E  0000  	NOP
002F  0BB8  	DECFSZ delay_ms_00000_arg_del, F
0030  281E  	GOTO	label2
0031  0008  	RETURN
0032        ; } delay_ms function end

0032        delay_10us_00000
0032        ; { delay_10us ; function begin
0032  08C7  	MOVF delay_10us_00000_arg_del, F
0033  1D03  	BTFSS STATUS,Z
0034  2836  	GOTO	label4
0035  0008  	RETURN
0036        label4
0036  3004  	MOVLW 0x04
0037        label5
0037  0000  	NOP
0038  3EFF  	ADDLW 0xFF
0039  1D03  	BTFSS STATUS,Z
003A  2837  	GOTO	label5
003B  0000  	NOP
003C  0000  	NOP
003D  0BC7  	DECFSZ delay_10us_00000_arg_del, F
003E  2836  	GOTO	label4
003F  0008  	RETURN
0040        ; } delay_10us function end

0040        delay_s_00000
0040        ; { delay_s ; function begin
0040        label6
0040  30FA  	MOVLW 0xFA
0041  00B8  	MOVWF delay_ms_00000_arg_del
0042  201A  	CALL delay_ms_00000
0043  30FA  	MOVLW 0xFA
0044  00B8  	MOVWF delay_ms_00000_arg_del
0045  201A  	CALL delay_ms_00000
0046  30FA  	MOVLW 0xFA
0047  00B8  	MOVWF delay_ms_00000_arg_del
0048  201A  	CALL delay_ms_00000
0049  30FA  	MOVLW 0xFA
004A  00B8  	MOVWF delay_ms_00000_arg_del
004B  201A  	CALL delay_ms_00000
004C  0BB4  	DECFSZ delay_s_00000_arg_del, F
004D  2840  	GOTO	label6
004E  0008  	RETURN
004F        ; } delay_s function end


00EE        __div_16_1_00003
00EE        ; { __div_16_16 ; function begin
00EE  01BF  	CLRF __div_16_1_00003_1_r
00EF  01C0  	CLRF __div_16_1_00003_1_r+D'1'
00F0  01C2  	CLRF CompTempVarRet214
00F1  01C3  	CLRF CompTempVarRet214+D'1'
00F2  01C1  	CLRF __div_16_1_00003_1_i
00F3        label18
00F3  1A41  	BTFSC __div_16_1_00003_1_i,4
00F4  0008  	RETURN
00F5  1003  	BCF STATUS,C
00F6  0DC2  	RLF CompTempVarRet214, F
00F7  0DC3  	RLF CompTempVarRet214+D'1', F
00F8  0DB9  	RLF __div_16_1_00003_arg_a, F
00F9  0DBA  	RLF __div_16_1_00003_arg_a+D'1', F
00FA  0DBF  	RLF __div_16_1_00003_1_r, F
00FB  0DC0  	RLF __div_16_1_00003_1_r+D'1', F
00FC  083C  	MOVF __div_16_1_00003_arg_b+D'1', W
00FD  0240  	SUBWF __div_16_1_00003_1_r+D'1', W
00FE  1D03  	BTFSS STATUS,Z
00FF  2902  	GOTO	label19
0100  083B  	MOVF __div_16_1_00003_arg_b, W
0101  023F  	SUBWF __div_16_1_00003_1_r, W
0102        label19
0102  1C03  	BTFSS STATUS,C
0103  290B  	GOTO	label20
0104  083B  	MOVF __div_16_1_00003_arg_b, W
0105  02BF  	SUBWF __div_16_1_00003_1_r, F
0106  083C  	MOVF __div_16_1_00003_arg_b+D'1', W
0107  1C03  	BTFSS STATUS,C
0108  03C0  	DECF __div_16_1_00003_1_r+D'1', F
0109  02C0  	SUBWF __div_16_1_00003_1_r+D'1', F
010A  1442  	BSF CompTempVarRet214,0
010B        label20
010B  0AC1  	INCF __div_16_1_00003_1_i, F
010C  28F3  	GOTO	label18
010D        ; } __div_16_16 function end


01D3        __rem_16_1_00004
01D3        ; { __rem_16_16 ; function begin
01D3  01BE  	CLRF CompTempVarRet216
01D4  01BF  	CLRF CompTempVarRet216+D'1'
01D5  01BB  	CLRF __rem_16_1_00004_1_c
01D6  01BC  	CLRF __rem_16_1_00004_1_c+D'1'
01D7  01BD  	CLRF __rem_16_1_00004_1_i
01D8        label32
01D8  1A3D  	BTFSC __rem_16_1_00004_1_i,4
01D9  0008  	RETURN
01DA  1003  	BCF STATUS,C
01DB  0DBB  	RLF __rem_16_1_00004_1_c, F
01DC  0DBC  	RLF __rem_16_1_00004_1_c+D'1', F
01DD  0DB4  	RLF __rem_16_1_00004_arg_a, F
01DE  0DB5  	RLF __rem_16_1_00004_arg_a+D'1', F
01DF  0DBE  	RLF CompTempVarRet216, F
01E0  0DBF  	RLF CompTempVarRet216+D'1', F
01E1  0837  	MOVF __rem_16_1_00004_arg_b+D'1', W
01E2  023F  	SUBWF CompTempVarRet216+D'1', W
01E3  1D03  	BTFSS STATUS,Z
01E4  29E7  	GOTO	label33
01E5  0836  	MOVF __rem_16_1_00004_arg_b, W
01E6  023E  	SUBWF CompTempVarRet216, W
01E7        label33
01E7  1C03  	BTFSS STATUS,C
01E8  29F0  	GOTO	label34
01E9  0836  	MOVF __rem_16_1_00004_arg_b, W
01EA  02BE  	SUBWF CompTempVarRet216, F
01EB  0837  	MOVF __rem_16_1_00004_arg_b+D'1', W
01EC  1C03  	BTFSS STATUS,C
01ED  03BF  	DECF CompTempVarRet216+D'1', F
01EE  02BF  	SUBWF CompTempVarRet216+D'1', F
01EF  143B  	BSF __rem_16_1_00004_1_c,0
01F0        label34
01F0  0ABD  	INCF __rem_16_1_00004_1_i, F
01F1  29D8  	GOTO	label32
01F2        ; } __rem_16_16 function end

01F2        __mul_8_8__00005
01F2        ; { __mul_8_8__8 ; function begin
01F2  01BB  	CLRF __mul_8_8__00005_1_i
01F3  01BC  	CLRF CompTempVarRet451
01F4        label35
01F4  19BB  	BTFSC __mul_8_8__00005_1_i,3
01F5  0008  	RETURN
01F6  1C39  	BTFSS __mul_8_8__00005_arg_b,0
01F7  29FA  	GOTO	label36
01F8  0838  	MOVF __mul_8_8__00005_arg_a, W
01F9  07BC  	ADDWF CompTempVarRet451, F
01FA        label36
01FA  0CB9  	RRF __mul_8_8__00005_arg_b, F
01FB  1003  	BCF gbl_status,0
01FC  0DB8  	RLF __mul_8_8__00005_arg_a, F
01FD  0ABB  	INCF __mul_8_8__00005_1_i, F
01FE  29F4  	GOTO	label35
01FF        ; } __mul_8_8__8 function end


0560        _startup
0560  30D5  	MOVLW 0xD5
0561  1283  	BCF STATUS, RP0
0562  1303  	BCF STATUS, RP1
0563  00E9  	MOVWF gbl_14_LSR
0564  30C4  	MOVLW 0xC4
0565  00EA  	MOVWF gbl_14_LSR+D'1'
0566  30BB  	MOVLW 0xBB
0567  00EB  	MOVWF gbl_14_LSR+D'2'
0568  30DC  	MOVLW 0xDC
0569  00EC  	MOVWF gbl_14_LSR+D'3'
056A  01ED  	CLRF gbl_15_gbl_aSig
056B  01EE  	CLRF gbl_15_gbl_aSig+D'1'
056C  01EF  	CLRF gbl_15_gbl_aSig+D'2'
056D  01F0  	CLRF gbl_15_gbl_aSig+D'3'
056E  01F1  	CLRF gbl_15_gbl_bSig
056F  01F2  	CLRF gbl_15_gbl_bSig+D'1'
0570  01F3  	CLRF gbl_15_gbl_bSig+D'2'
0571  01F4  	CLRF gbl_15_gbl_bSig+D'3'
0572  01F5  	CLRF gbl_15_gbl_zSig
0573  01F6  	CLRF gbl_15_gbl_zSig+D'1'
0574  01F7  	CLRF gbl_15_gbl_zSig+D'2'
0575  01F8  	CLRF gbl_15_gbl_zSig+D'3'
0576  1683  	BSF STATUS, RP0
0577  01A8  	CLRF gbl_15_gbl_aExp
0578  01A9  	CLRF gbl_15_gbl_bExp
0579  01FD  	CLRF gbl_15_gbl_zExp
057A  01FE  	CLRF gbl_15_gbl_zExp+D'1'
057B  01AA  	CLRF gbl_15_gbl_aSign
057C  01AB  	CLRF gbl_15_gbl_bSign
057D  01AC  	CLRF gbl_15_gbl_zSign
057E  01AD  	CLRF gbl_15_gbl_zSigZero
057F  01F9  	CLRF gbl_15_gbl_ret
0580  01FA  	CLRF gbl_15_gbl_ret+D'1'
0581  01FB  	CLRF gbl_15_gbl_ret+D'2'
0582  01FC  	CLRF gbl_15_gbl_ret+D'3'
0583  01A6  	CLRF gbl_float_rounding_mode
0584  01A7  	CLRF gbl_float_exception_flags
0585  01A5  	CLRF gbl_float_detect_tininess

0593  2C2E  	GOTO	main

2007  3F7A  	DW 0x3F7A
